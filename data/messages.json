[
  {
    "_key" : "e1",
    "label" : {
      "ISO:639:3:eng" : "missing required collection [@arg@]."
    }
  },
  {
    "_key" : "e2",
    "label" : {
      "ISO:639:3:eng" : "session is missing."
    }
  },
  {
    "_key" : "e3",
    "label" : {
      "ISO:639:3:eng" : "user not found [@arg@]."
    }
  },
  {
    "_key" : "e4",
    "label" : {
      "ISO:639:3:eng" : "password mismatch."
    }
  },
  {
    "_key" : "e5",
    "label" : {
      "ISO:639:3:eng" : "invalid token."
    }
  },
  {
    "_key" : "e6",
    "label" : {
      "ISO:639:3:eng" : "the administrator must be the first user."
    }
  },
  {
    "_key" : "e7",
    "label" : {
      "ISO:639:3:eng" : "users are managed by other users."
    }
  },
  {
    "_key" : "e8",
    "label" : {
      "ISO:639:3:eng" : "not authorised to manage users."
    }
  },
  {
    "_key" : "e9",
    "label" : {
      "ISO:639:3:eng" : "unable to create administrator."
    }
  },
  {
    "_key" : "e10",
    "label" : {
      "ISO:639:3:eng" : "the application cannot be used."
    }
  },
  {
    "_key" : "e11",
    "label" : {
      "ISO:639:3:eng" : "invalid input format."
    }
  },
  {
    "_key" : "e12",
    "label" : {
      "ISO:639:3:eng" : "invalid output format."
    }
  },
  {
    "_key" : "e13",
    "label" : {
      "ISO:639:3:eng" : "unsupported data type [@arg@]."
    }
  },
  {
    "_key" : "e14",
    "label" : {
      "ISO:639:3:eng" : "unsupported root data type [@arg@]."
    }
  },
  {
    "_key" : "e15",
    "label" : {
      "ISO:639:3:eng" : "unsupported data type validation field [@arg@]."
    }
  },
  {
    "_key" : "e16",
    "label" : {
      "ISO:639:3:eng" : "unsupported descriptor validation field [@arg@]."
    }
  },
  {
    "_key" : "e17",
    "label" : {
      "ISO:639:3:eng" : "unsupported format type [@arg@]."
    }
  },
  {
    "_key" : "e18",
    "label" : {
      "ISO:639:3:eng" : "unsupported traversal sense [@arg@]."
    }
  },
  {
    "_key" : "e19",
    "label" : {
      "ISO:639:3:eng" : "expecting [@arg@] entry in validation record."
    }
  },
  {
    "_key" : "e20",
    "label" : {
      "ISO:639:3:eng" : "term unknown in dictionary [@arg@]."
    }
  },
  {
    "_key" : "e21",
    "label" : {
      "ISO:639:3:eng" : "empty data type hierarchy [@arg@]."
    }
  },
  {
    "_key" : "e22",
    "label" : {
      "ISO:639:3:eng" : "not a number [@arg@]."
    }
  },
  {
    "_key" : "e23",
    "label" : {
      "ISO:639:3:eng" : "invalid date format [@arg@]."
    }
  },
  {
    "_key" : "e24",
    "label" : {
      "ISO:639:3:eng" : "invalid date [@arg@], expecting date in year, <month> and <day> format."
    }
  },
  {
    "_key" : "e25",
    "label" : {
      "ISO:639:3:eng" : "invalid month [@arg@], using year and month format."
    }
  },
  {
    "_key" : "e26",
    "label" : {
      "ISO:639:3:eng" : "invalid object reference, document [@arg@] not found in database."
    }
  },
  {
    "_key" : "e27",
    "label" : {
      "ISO:639:3:eng" : "invalid reference, document [@arg@] not found in collection."
    }
  },
  {
    "_key" : "e28",
    "label" : {
      "ISO:639:3:eng" : "unknown or invalid collection name [@arg@]."
    }
  },
  {
    "_key" : "e29",
    "label" : {
      "ISO:639:3:eng" : "required collection name is missing from validation record."
    }
  },
  {
    "_key" : "e30",
    "label" : {
      "ISO:639:3:eng" : "required enumerations list is missing from validation record."
    }
  },
  {
    "_key" : "e31",
    "label" : {
      "ISO:639:3:eng" : "term [@arg@] cannot be found in enumeration choices."
    }
  },
  {
    "_key" : "e32",
    "label" : {
      "ISO:639:3:eng" : "invalid reference, term [@arg@] is not an enumeration."
    }
  },
  {
    "_key" : "e33",
    "label" : {
      "ISO:639:3:eng" : "invalid object reference handle [@arg@]."
    }
  },
  {
    "_key" : "e34",
    "label" : {
      "ISO:639:3:eng" : "global identifier [@arg@] not found."
    }
  },
  {
    "_key" : "e35",
    "label" : {
      "ISO:639:3:eng" : "invalid mapped structure key [@arg@], not a term."
    }
  },
  {
    "_key" : "e36",
    "label" : {
      "ISO:639:3:eng" : "descriptor [@arg@] does not have a data type."
    }
  },
  {
    "_key" : "e37",
    "label" : {
      "ISO:639:3:eng" : "descriptor [@1arg@] has an unsupported data type [@2arg@]."
    }
  },
  {
    "_key" : "e38",
    "label" : {
      "ISO:639:3:eng" : "the value can only be managed by rank [@arg@]."
    }
  },
  {
    "_key" : "e39",
    "label" : {
      "ISO:639:3:eng" : "the value can only be managed by role [@arg@]."
    }
  },
  {
    "_key" : "e40",
    "label" : {
      "ISO:639:3:eng" : "term [@arg@] not found."
    }
  },
  {
    "_key" : "e41",
    "label" : {
      "ISO:639:3:eng" : "data dictionary is required."
    }
  },
  {
    "_key" : "e42",
    "label" : {
      "ISO:639:3:eng" : "the service is busy, try again later."
    }
  },
  {
    "_key" : "e43",
    "label" : {
      "ISO:639:3:eng" : "missing session UID."
    }
  },
  {
    "_key" : "e44",
    "label" : {
      "ISO:639:3:eng" : "the service is in an error state, please contact support."
    }
  },
  {
    "_key" : "e45",
    "label" : {
      "ISO:639:3:eng" : "the provided term [@arg@] is not a data type."
    }
  },
  {
    "_key" : "e46",
    "label" : {
      "ISO:639:3:eng" : "the type [@arg@] is not a base data type."
    }
  },
  {
    "_key" : "e47",
    "label" : {
      "ISO:639:3:eng" : "the provided term object requires the [_id] field."
    }
  },
  {
    "_key" : "e48",
    "label" : {
      "ISO:639:3:eng" : "the provided term object requires the [_key] field."
    }
  },
  {
    "_key" : "e49",
    "label" : {
      "ISO:639:3:eng" : "the provided term object requires the [var] field."
    }
  },
  {
    "_key" : "e50",
    "label" : {
      "ISO:639:3:eng" : "the provided object key type is missing the data type."
    }
  },
  {
    "_key" : "e51",
    "label" : {
      "ISO:639:3:eng" : "the object key type must be a text type [@arg@]."
    }
  },
  {
    "_key" : "e52",
    "label" : {
      "ISO:639:3:eng" : "the value must be numeric [@arg@]."
    }
  },
  {
    "_key" : "e53",
    "label" : {
      "ISO:639:3:eng" : "the reference [@1arg@] is not an instance of [@2arg@]."
    }
  },
  {
    "_key" : "e54",
    "label" : {
      "ISO:639:3:eng" : "required instance reference is missing from validation record."
    }
  },
  {
    "_key" : "e55",
    "label" : {
      "ISO:639:3:eng" : "the value must be an object."
    }
  },
  {
    "_key" : "e56",
    "label" : {
      "ISO:639:3:eng" : "descriptor [@arg@] does not exist."
    }
  },
  {
    "_key" : "e57",
    "label" : {
      "ISO:639:3:eng" : "unknown cast function [@arg@]."
    }
  },
  {
    "_key" : "e58",
    "label" : {
      "ISO:639:3:eng" : "the value must be an array."
    }
  },
  {
    "_key" : "e59",
    "label" : {
      "ISO:639:3:eng" : "unknown custom function [@arg@]."
    }
  },
  {
    "_key" : "e60",
    "label" : {
      "ISO:639:3:eng" : "the value must be scalar."
    }
  },
  {
    "_key" : "e61",
    "label" : {
      "ISO:639:3:eng" : "unable to register user."
    }
  },
  {
    "_key" : "e62",
    "label" : {
      "ISO:639:3:eng" : "no current user, please log in."
    }
  },
  {
    "_key" : "e63",
    "label" : {
      "ISO:639:3:eng" : "user already exists."
    }
  },
  {
    "_key" : "e64",
    "label" : {
      "ISO:639:3:eng" : "edge [@1arg@] ==> [@2arg@] with predicate [@3arg@] already exists."
    }
  },
  {
    "_key" : "e65",
    "label" : {
      "ISO:639:3:eng" : "reference [@1arg@] not found in collection [@2arg@]."
    }
  },
  {
    "_key" : "e66",
    "label" : {
      "ISO:639:3:eng" : "there is more than one edge with [@1arg@] ==> [@2arg@] and predicate [@3arg@]."
    }
  },
  {
    "_key" : "e67",
    "label" : {
      "ISO:639:3:eng" : "_id field mismatch: current [@1arg@], found [@2arg@]."
    }
  },
  {
    "_key" : "e68",
    "label" : {
      "ISO:639:3:eng" : "_key field mismatch: current [@1arg@], found [@2arg@]."
    }
  },
  {
    "_key" : "e69",
    "label" : {
      "ISO:639:3:eng" : "missing required fields [@arg@]."
    }
  },
  {
    "_key" : "e70",
    "label" : {
      "ISO:639:3:eng" : "expecting [@arg@] to be an edge collection."
    }
  },
  {
    "_key" : "e71",
    "label" : {
      "ISO:639:3:eng" : "edge [@1arg@] ==> [@2arg@] with predicate [@3arg@] and attributes [@4arg@] already exists."
    }
  },
  {
    "_key" : "e72",
    "label" : {
      "ISO:639:3:eng" : "duplicate document in collection [@1arg@] with references [@2arg@]."
    }
  },
  {
    "_key" : "e73",
    "label" : {
      "ISO:639:3:eng" : "expecting [@arg@] to be a document collection."
    }
  },
  {
    "_key" : "e74",
    "label" : {
      "ISO:639:3:eng" : "there is more than one edge with [@1arg@] ==> [@2arg@], predicate [@3arg@] and attributes [@4arg@]."
    }
  },
  {
    "_key" : "e75",
    "label" : {
      "ISO:639:3:eng" : "edge with [@1arg@] ==> [@2arg@], predicate [@3arg@] and attributes [@4arg@] not found in collection[@5arg@]."
    }
  },
  {
    "_key" : "e76",
    "label" : {
      "ISO:639:3:eng" : "attempt to resolve document with fields [@1arg@] in collection [@2arg@] resulted in more than one document found: combination of fields is not unique."
    }
  },
  {
    "_key" : "e77",
    "label" : {
      "ISO:639:3:eng" : "cannot change the value of the [@arg@] field."
    }
  },
  {
    "_key" : "e78",
    "label" : {
      "ISO:639:3:eng" : "resolved and actual [@arg@] field values do not match."
    }
  },
  {
    "_key" : "e79",
    "label" : {
      "ISO:639:3:eng" : "current manager [@1arg@] and resolved manager [@2arg@] do not match."
    }
  },
  {
    "_key" : "e80",
    "label" : {
      "ISO:639:3:eng" : "missing user manager."
    }
  },
  {
    "_key" : "e81",
    "label" : {
      "ISO:639:3:eng" : "duplicate edge with signature [@arg@]."
    }
  },
  {
    "_key" : "e82",
    "label" : {
      "ISO:639:3:eng" : "user [@arg@] has no manager."
    }
  },
  {
    "_key" : "e83",
    "label" : {
      "ISO:639:3:eng" : "current group [@1arg@] and resolved group [@2arg@] do not match."
    }
  },
  {
    "_key" : "e84",
    "label" : {
      "ISO:639:3:eng" : "the user cannot be deleted, it manages [@arg@] users."
    }
  },
  {
    "_key" : "e85",
    "label" : {
      "ISO:639:3:eng" : "attempt to modify the following locked fields: [@arg@]."
    }
  },
  {
    "_key" : "e86",
    "label" : {
      "ISO:639:3:eng" : "form [@arg@] not found."
    }
  },
  {
    "_key" : "e87",
    "label" : {
      "ISO:639:3:eng" : "user [@arg@] manages other users, but has no manager."
    }
  },
  {
    "_key" : "e88",
    "label" : {
      "ISO:639:3:eng" : "unable to compute global identifier, the local identifier is missing."
    }
  },
  {
    "_key" : "e89",
    "label" : {
      "ISO:639:3:eng" : "unable to compute global identifier, the namespace [@arg@], is missing its global identifier."
    }
  },
  {
    "_key" : "e90",
    "label" : {
      "ISO:639:3:eng" : "cannot remove descriptor [@arg@], it is embedded."
    }
  },
  {
    "_key" : "e91",
    "label" : {
      "ISO:639:3:eng" : "cannot remove descriptor [@arg@], it is default."
    }
  },
  {
    "_key" : "e92",
    "label" : {
      "ISO:639:3:eng" : "cannot remove descriptor [@arg@], it is standard."
    }
  },
  {
    "_key" : "e93",
    "label" : {
      "ISO:639:3:eng" : "missing required fields [@arg@] to resolve object."
    }
  },
  {
    "_key" : "e94",
    "label" : {
      "ISO:639:3:eng" : "missing collection reference."
    }
  },
  {
    "_key" : "e95",
    "label" : {
      "ISO:639:3:eng" : "the user declares a group [@arg@] relationship that doesn't exist."
    }
  },
  {
    "_key" : "e96",
    "label" : {
      "ISO:639:3:eng" : "the user declares a manager [@arg@] relationship that doesn't exist."
    }
  },
  {
    "_key" : "e97",
    "label" : {
      "ISO:639:3:eng" : "you are not allowed to manage the [@arg@] user."
    }
  },
  {
    "_key" : "e98",
    "label" : {
      "ISO:639:3:eng" : "missing required fields to compute edge key in [@arg@] instance."
    }
  },
  {
    "_key" : "e99",
    "label" : {
      "ISO:639:3:eng" : "the field “@arg@‘ is reserved and cannot be modified."
    }
  },
  {
    "_key" : "e100",
    "label" : {
      "ISO:639:3:eng" : "not a branched edge [@1arg@] = [@2arg@] => [@3arg@]."
    }
  },
  {
    "_key" : "e101",
    "label" : {
      "ISO:639:3:eng" : "document is persistent [@arg@]."
    }
  },
  {
    "_key" : "e102",
    "label" : {
      "ISO:639:3:eng" : "document is not persistent."
    }
  },
  {
    "_key" : "e103",
    "label" : {
      "ISO:639:3:eng" : "not an attribute edge [@1arg@] = [@2arg@] => [@3arg@]."
    }
  },
  {
    "_key" : "e104",
    "label" : {
      "ISO:639:3:eng" : "expecting document contents, selector or reference."
    }
  },
  {
    "_key" : "e105",
    "label" : {
      "ISO:639:3:eng" : "expecting [@1arg@], but got [@2arg@] in [@3arg@]."
    }
  },
  {
    "_key" : "e106",
    "label" : {
      "ISO:639:3:eng" : "cross-collection reference, [@1arg@], expecting [@2arg@]."
    }
  },
  {
    "_key" : "e107",
    "label" : {
      "ISO:639:3:eng" : "cannot locate document without selection data."
    }
  },
  {
    "_key" : "e108",
    "label" : {
      "ISO:639:3:eng" : "the object [@arg@] has constraints that prevent it from being removed."
    }
  },
  {
    "_key" : "e109",
    "label" : {
      "ISO:639:3:eng" : "the object is immutable."
    }
  },
  {
    "_key" : "e110",
    "label" : {
      "ISO:639:3:eng" : "invalid transaction operation code [@arg@]."
    }
  },
  {
    "_key" : "e111",
    "label" : {
      "ISO:639:3:eng" : "current user does not match."
    }
  },
  {
    "_key" : "e112",
    "label" : {
      "ISO:639:3:eng" : "not authorised to upload datasets."
    }
  },
  {
    "_key" : "e113",
    "label" : {
      "ISO:639:3:eng" : "only the system administrator is allowed to perform this operation."
    }
  },
  {
    "_key" : "e114",
    "label" : {
      "ISO:639:3:eng" : "not authorised to manage metadata."
    }
  },
  {
    "_key" : "e115",
    "label" : {
      "ISO:639:3:eng" : "not a study reference [@arg@]."
    }
  },
  {
    "_key" : "s:init:descriptors",
    "response" : {
      "ISO:639:3:eng" : "The operation result."
    },
    "description" : {
      "ISO:639:3:eng" : "<p>This service will iterate all descriptors and replace them, its duty is to initialise local properties and validate the objects.</p><p>The service will first set the creation time stamp for all descriptors, then it will set the validation record for all descriptors and finally it will replace all descriptors.</p><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the operation status.</p>"
    }
  },
  {
    "_key" : "s:init:shapes",
    "response" : {
      "ISO:639:3:eng" : "The operation result."
    },
    "description" : {
      "ISO:639:3:eng" : "<p>This service will iterate all shapes and replace them, its duty is to initialise local properties and validate the objects.</p><p>The service will first set the creation time stamp for all shapes, then it will replace all shapes.</p><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the operation status.</p>"
    }
  },
  {
    "_key" : "s:init:toponyms",
    "response" : {
      "ISO:639:3:eng" : "The operation result."
    },
    "description" : {
      "ISO:639:3:eng" : "<p>This service will iterate all toponyms and replace them, its duty is to initialise local properties and validate the objects.</p><p>The service will first set the creation time stamp for all records, then it will replace all records.</p><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the operation status.</p>"
    }
  },
  {
    "_key" : "s:init:edges",
    "response" : {
      "ISO:639:3:eng" : "The operation result."
    },
    "description" : {
      "ISO:639:3:eng" : "<p>This service will iterate all edges and replace them, its duty is to initialise local properties and validate the objects.</p><p>The service will first set the creation time stamp for all records, then it will replace all records.</p><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the operation status.</p>"
    }
  },
  {
    "_key" : "s:init:schemas",
    "response" : {
      "ISO:639:3:eng" : "The operation result."
    },
    "description" : {
      "ISO:639:3:eng" : "<p>This service will iterate all schemas and replace them, its duty is to initialise local properties and validate the objects.</p><p>The service will first set the creation time stamp for all records, then it will replace all records.</p><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the operation status.</p>"
    }
  },
  {
    "_key": "s:schema:enumIsChoice",
    "body": {
      "ISO:639:3:eng": "<p>The service expects two parameters from the request body:</p><ul><li><strong>term</strong>: The reference(s) to the term to test as its <code>_id</code> or <code>_key</code>: it can be provided as a <em>string</em>, or as an <em>array</em> of strings.</li><li><strong>enum</strong>: An array of term <code>_id</code> or <code>_key</code> values which represent the set of enumerations to which the term should belong. To ignore enumeration membership, provide either an <em>empty array</em> or <code>null</code>, which is the default choice.</li></ul>"
    },
    "response": {
      "ISO:639:3:eng": "<p>The service will return an object as such, <code>{ result : &lt;value&gt; }</code>, where <em>value</em> depends on the format in which you provided the term parameter:</p><ul><li>If <strong>term</strong> was provided as a <em>scalar</em>, <em>value</em> will be a <em>boolean</em>.</li><li>If <strong>term</strong> was provided as an <em>array</em>, <em>value</em> will be an <em>object</em> indexed by the elements of the provided array with as value a <em>boolean</em>.</li></ul><p>A value of <code>true</code> means the term <em>is</em> an enumeration choice, either of any enumeration, or of at least one of the provided enumeration references.</p>"
    },
    "description": {
      "ISO:639:3:eng": "<p>The service will check if a term is an <em>enumeration choice</em>, this means that the term should be a <em>selectable choice</em> of an <em>enumeration</em>, and not a categorical entry.</p><br /><p>Enumerations are <em>controlled vocabularies</em>em> in directed graphs whose edges contain a <em>branch</em> property that is used to mark specific tree structures within the graph. The elements of an enumeration may either be <em>choices</em>, in which case they are <em>valid selections</em> of the vocabulary, or they can be <em>categories</em>, in which case they do not represent <em>selectable</em> elements of the vocabulary, but <em>categories</em> that are used to group elements together. This service can be used to check if the term is a <em>selectable</em> element of the controlled vocabulary.</p><br /><p>The service expects a <strong>term</strong> parameter provided as a term <code>_id</code> or <code>_key</code> reference which can either be a <em>scalar string</em> or an <em>array of strings</em>. A second optional parameter, <strong>enum</strong>, can be provided as an <em>array</em> of <code>_id</code> or <code>_key</code> term references which represent a list of enumerations; <em>by enumeration we mean a term that defines a controlled vocabulary</em>.</p><br /><p>If the second parameter is provided, the service will assert whether the term is a choice of at least one of the enumerations provided in the second parameter; if the second parameter is omitted, the service will check whether the term is an enumeration choice element of any enumeration.</p><br /><p>The service returns an object, <code>{ result : &lt;value&gt; }</code>: if the term was provided as a scalar, <em>value</em> will be a <em>boolean</em>, if it was provided as an array, <em>value</em> will be an object with as key the provided array elements and as value a <em>boolean</em>.</p><br /><p>The service will raise an exception if the provided term(s) are not found; the second parameter references will not be checked.</p>"
    }
  },
  {
    "_key" : "s:schema:enumIsBranch",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects one parameter from the request body:</p><ul><li><strong>term</strong>: The reference(s) to the term to test as its <code>_id</code> or <code>_key</code>: it can be provided as a <em>string</em>, or as an <em>array</em> of strings.</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return an object as such, <code>{ result : &lt;value&gt; }</code>, where <em>value</em> depends on the format in which you provided the term parameter:</p><ul><li>If <strong>term</strong> was provided as a <em>scalar</em>, <em>value</em> will be a <em>boolean</em>.</li><li>If <strong>term</strong> was provided as an <em>array</em>, <em>value</em> will be an <em>object</em> indexed by the elements of the provided array with as value a <em>boolean</em>.</li></ul><p>A value of <code>true</code> means the term <em>is</em> an enumeration, or the root of a controlled vocabulary.</p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service will check if a term is an <em>enumeration</em>, in other words, if the term defines a <em>controlled vocabulary</em>em>.</p><br /><p>Enumerations are <em>controlled vocabularies</em>em> in directed graphs whose edges contain a <em>branch</em> property that is used to mark specific tree structures within the graph. In general, the root of a specific enumeration tree will be the term that defines the controlled vocabulary and will be set in all the graph edges belonging to that specific tree: this service will check if the provided term can be found as a branch in the <em>schemas</em> graph, thus, if the term defines a controlled vocabulary.</p><br /><p>The service expects a <strong>term</strong> parameter provided as a term <code>_id</code> or <code>_key</code> reference which can either be a <em>scalar string</em> or an <em>array of strings</em>.</p><br /><p>The service will check if the provided term is an <em>instance</em>em> of the <em>enumeration class</em>, this will be the case if the term has been used as the <em>definition</em> of a controlled vocabulary and, therefore, can be found as a branch in the schemas graph.</p><br /><p>The service returns an object, <code>{ result : &lt;value&gt; }</code>: if the term was provided as a scalar, <em>value</em> will be a <em>boolean</em>, if it was provided as an array, <em>value</em> will be an object with as key the provided array elements and as value a <em>boolean</em>.</p><br /><p>The service will raise an exception if the provided term(s) are not found.</p>"
    }
  },
  {
    "_key" : "s:schema:enumGetPath",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>leaf vertex</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>branch</strong>: the <em>root node</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>; a level of <code>0</code> means no level limit.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>.<br />The value may be provided as a <em>string</em>, as an <em>array</em>, or it can be <code>null</code>.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>doChoice</strong>: this is a <em>boolean</em> flag that indicates whether to filter <em>enumeration choice elements</em>: if <code>true</code>, only enumeration choice elements will be included in the result.<br />Please refer to the <code>/enum/isChoice</code> service for a description.<br /><em>Defaults to <code>false</code>.</em></li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields.<br />If <code>true</code>, the above-mentioned fields will contain the value matching the session language code; if the field does not have an entry corresponding to the session language, it will remain untouched.<br /><em>Defaults to <code>false</code>.</em></li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array will contain the <em>vertex</em> and the <em>edge</em>.<br /><em>Defaults to <code>false</code>.</em></li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return an <em>array</em> of elements whose structure depends on the provided parameters:</p><ul><li><strong>doEdge</strong>:<ul><li>if this parameter is <code>false</code>:<ul><li>The element will contain the <em>path vertices</em> formatted according to the <strong>vField</strong> parameter:<ul><li>If <code>null</code> or omitted the <em>vertex</em> will be the <em>original document</em>.</li><li>If a <em>string</em>, the element will contain the <em>value</em> of the <em>vertex document field</em> whose <em>name matches the string</em>; if no field matches, the value will be <code>null</code>.</li><li>If an <em>array</em>, the element will contain the <em>vertex document</em> comprised of only those <em>fields</em> that <em>march the provided array elements</em>.</li></ul></li></ul></li><li>if the parameter is <code>true</code>:<ul><li>The element will contain an <em>object</em> with the following properties:<ul><li><strong>term</strong>: will contain the <em>vertex</em> formatted according to the <strong>vField</strong> parameter <em>(see above)</em>.</li><li><strong>edge</strong>: will contain the <em>edge</em> formatted according to the <strong>eField</strong> parameter <em>(refer to vField)</em>; if there is no edge, this will occur for the tree root, this property will not be included.</li></ul></li></ul></li></ul></li></ul>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service will return the <em>enumeration path</em> starting from the provided <em>leaf</em> node and ending with the provided <em>branch</em> graph node, it will return an array of elements corresponding to the <em>vertices</em> of the path, or an array of objects containing both the <em>vertex</em> and the corresponding <em>edge</em> for the path elements, depending on the provided parameters.</p><br /><p>Enumerations are <em>controlled vocabularies</em> shaped as <em>tree structures</em>, where the <em>branch</em> represents both the tree <em>root node</em> and a specific <em>tree structure</em> embedded in the graph. This service will perform an outbound traversal of the graph contained in the <em>schemas</em> collection starting from the provided <em>origin</em> leaf node and traversing the hierarchy of the provided <em>branch</em> tree up to the <em>root node</em>, returning the visited elements in an array. The result will be the path that starts from the leaf node and ends with the root node.</p><br /><p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>leaf vertex</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>branch</strong>: the <em>root node</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>. The value may be provided as a scalar, as an array, or it can be null:<ul><li>If provided as a <em>scalar</em>, the result will be the vertex <em>field value</em> corresponding to the provided <em>descriptor reference</em>. If the vertex does not contain that field, the value will be <code>null</code>.</li><li>If provided as an <em>array</em>, the result will be the <em>vertex document</em> comprised only of those fields matching the provided <em>references list</em>.</li><li>If <code>null</code> is provided, the vertex document will remain untouched.</li></ul></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.</li><li><strong>doChoice</strong>: this is a <em>boolean</em> flag that indicates whether to filter <em>enumeration choice elements</em>: if <code>true</code>, only enumeration choice elements will be included in the result. Please refer to the <code>/enum/isChoice</code> service for a description.</li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields. If <code>true</code>, the above-mentioned fields, instead of being an object with as key the language code and as value the description, they will contain the description corresponding to the session language. If the field does not have an entry corresponding to the session language, it will remain untouched.</li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array, instead of containing only the vertex, they will contain an <em>object</em> with two elements:<ul><li><strong>vertex</strong>: will contain the <em>vertex</em>, optionally formatted by the <strong>vField</strong> parameter options.</li><li><strong>edge</strong>: will contain the <em>edge</em>, optionally formatted by the <strong>eField</strong> parameter options.</li></ul></li></ul><p>The service will return an <em>array</em> of elements whose format depends on the above <strong>doEdge</strong>, <strong>vField</strong> and <strong>eField</strong> parameters.</p><br /><p>The service will raise an exception if the provided <em>origin</em> parameter <em>cannot be resolved</em>.</p>"
    }
  },
  {
    "_key" : "s:schema:enumGetList",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>vertex</em> of the tree whose siblings are to be returned, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>branch</strong>: the <em>root node</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>; a level of <code>0</code> means no level limit.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>.<br />The value may be provided as a <em>string</em>, as an <em>array</em>, or it can be <code>null</code>.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>doChoice</strong>: this is a <em>boolean</em> flag that indicates whether to filter <em>enumeration choice elements</em>: if <code>true</code>, only enumeration choice elements will be included in the result.<br />Please refer to the <code>/enum/isChoice</code> service for a description.<br /><em>Defaults to <code>false</code>.</em></li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields.<br />If <code>true</code>, the above-mentioned fields will contain the value matching the session language code; if the field does not have an entry corresponding to the session language, it will remain untouched.<br /><em>Defaults to <code>false</code>.</em></li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array will contain the <em>vertex</em> and the <em>edge</em>.<br /><em>Defaults to <code>false</code>.</em></li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return the flattened <em>array</em> of siblings of the provided root node in the provided branch of the graph; the nodes structure depends on the following parameters:</p><ul><li><strong>doEdge</strong>:<ul><li>if this parameter is <code>false</code>:<ul><li>The element will contain the <em>path vertices</em> formatted according to the <strong>vField</strong> parameter:<ul><li>If <code>null</code> or omitted the <em>vertex</em> will be the <em>original document</em>.</li><li>If a <em>string</em>, the element will contain the <em>value</em> of the <em>vertex document field</em> whose <em>name matches the string</em>; if no field matches, the value will be <code>null</code>.</li><li>If an <em>array</em>, the element will contain the <em>vertex document</em> comprised of only those <em>fields</em> that <em>march the provided array elements</em>.</li></ul></li></ul></li><li>if the parameter is <code>true</code>:<ul><li>The element will contain an <em>object</em> with the following properties:<ul><li><strong>vertex</strong>: will contain the <em>vertex</em> formatted according to the <strong>vField</strong> parameter <em>(see above)</em>.</li><li><strong>edge</strong>: will contain the <em>edge</em> formatted according to the <strong>eField</strong> parameter <em>(refer to vField)</em>; if there is no edge, this will occur for the tree root, this property will not be included.</li></ul></li></ul></li></ul></li></ul>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service will return the <em>enumeration siblings</em> of the provided <em>origin</em> node of the <em>schemas</em> graph belonging to the provided <em>branch</em>. It will return an array of elements corresponding to the <em>vertices</em> of the graph, or an array of objects containing both the <em>vertex</em> and the corresponding <em>edge</em>, depending on the provided parameters.</p><br /><p>Enumerations are <em>controlled vocabularies</em> shaped as <em>tree structures</em>, where the <em>branch</em> represents both the tree <em>root node</em> and a specific <em>tree structure</em> embedded in the graph. This service will perform an inbound traversal of the graph contained in the <em>schemas</em> collection starting from the provided <em>origin</em> node and visiting all the sibling elements belonging to the provided <em>branch</em> tree, returning the elements in a <em>flattened</em> array. The result will be the selection of all the siblings of the <em>origin</em> node belonging to the <em>branch</em> tree.</p><br /><p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the traversal origin <em>vertex</em> node, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>branch</strong>: the <em>root node</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. The value may be provided as a scalar, as an array, or it can be null:<ul><li>If provided as a <em>scalar</em>, the result will be the vertex <em>field value</em> corresponding to the provided <em>descriptor reference</em>. If the vertex does not contain that field, the value will be <code>null</code>.</li><li>If provided as an <em>array</em>, the result will be the <em>vertex document</em> comprised only of those fields matching the provided <em>references list</em>.</li><li>If <code>null</code> is provided, the vertex document will remain untouched.</li></ul></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.</li><li><strong>doChoice</strong>: this is a <em>boolean</em> flag that indicates whether to filter <em>enumeration choice elements</em>: if <code>true</code>, only enumeration choice elements will be included in the result. Please refer to the <code>/enum/isChoice</code> service for a description.</li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields. If <code>true</code>, the above-mentioned fields, instead of being an object with as key the language code and as value the description, they will contain the description corresponding to the session language. If the field does not have an entry corresponding to the session language, it will remain untouched.</li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array, instead of containing only the vertex, they will contain an <em>object</em> with two elements:<ul><li><strong>vertex</strong>: will contain the <em>vertex</em>, optionally formatted by the <strong>vField</strong> parameter options.</li><li><strong>edge</strong>: will contain the <em>edge</em>, optionally formatted by the <strong>eField</strong> parameter options.</li></ul></li></ul><p>The service will return a <em>flattened array</em> of all the siblings of the origin node, in the format determined by the above <strong>doEdge</strong>, <strong>vField</strong> and <strong>eField</strong> parameters.</p><br /><p>The service will raise an exception if the provided <em>origin</em> parameter <em>cannot be resolved</em>.</p>"
    }
  },
  {
    "_key" : "s:schema:enumGetTree",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>vertex</em> of the tree whose siblings are to be returned, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>branch</strong>: the <em>root node</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>; a level of <code>0</code> means no level limit.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>.<br />The value may be provided as a <em>string</em>, as an <em>array</em>, or it can be <code>null</code>.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields.<br />If <code>true</code>, the above-mentioned fields will contain the value matching the session language code; if the field does not have an entry corresponding to the session language, it will remain untouched.<br /><em>Defaults to <code>false</code>.</em></li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array will contain the <em>vertex</em> and the <em>edge</em>.<br /><em>Defaults to <code>false</code>.</em></li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return the hierarchy of the provided root <em>siblings</em>, the top nodes will have a property, <code>_children</code>, which is an array that will contain the list of the node's children. If the minimum depth level is <code>0</code>, the result will be an array with a single node: the root. If the level is greater than <code>0</code>, the result will be an array of nodes from which the traversal started. The format of the nodes depends on the following parameters:</p><ul><li><strong>doEdge</strong>:<ul><li>if this parameter is <code>false</code>:<ul><li>The element will contain the <em>path vertices</em> formatted according to the <strong>vField</strong> parameter:<ul><li>If <code>null</code> or omitted the <em>vertex</em> will be the <em>original document</em>.</li><li>If a <em>string</em>, the element will contain the <em>value</em> of the <em>vertex document field</em> whose <em>name matches the string</em>; if no field matches, the value will be <code>null</code>.</li><li>If an <em>array</em>, the element will contain the <em>vertex document</em> comprised of only those <em>fields</em> that <em>march the provided array elements</em>.</li></ul></li></ul></li><li>if the parameter is <code>true</code>:<ul><li>The element will contain an <em>object</em> with the following properties:<ul><li><strong>vertex</strong>: will contain the <em>vertex</em> formatted according to the <strong>vField</strong> parameter <em>(see above)</em>.</li><li><strong>edge</strong>: will contain the <em>edge</em> formatted according to the <strong>eField</strong> parameter <em>(refer to vField)</em>; if there is no edge, this will occur for the tree root, this property will not be included.</li></ul></li></ul></li></ul></li></ul>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service will return the <em>enumeration siblings</em> of the provided <em>origin</em> node of the <em>schemas</em> graph belonging to the provided <em>branch</em>. It will return an an array containing the list of nodes from which the traversal started with a property, <code>_children</code>, that is an array containing the children nodes of the current node. The nodes will contain either the vertex, ot the vertex and the corresponding edge, depending on the service parameter.</p><br /><p>Enumerations are <em>controlled vocabularies</em> shaped as <em>tree structures</em>, where the <em>branch</em> represents both the tree <em>root node</em> and a specific <em>tree structure</em> embedded in the graph. This service will perform an inbound traversal of the graph contained in the <em>schemas</em> collection starting from the provided <em>origin</em> node and visiting all the sibling elements belonging to the provided <em>branch</em> tree, returning an array of the nodes from which the traversal started.</p><br /><p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the traversal origin <em>vertex</em> node, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>branch</strong>: the <em>root node</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>. The value may be provided as a scalar, as an array, or it can be null:<ul><li>If provided as a <em>scalar</em>, the result will be the vertex <em>field value</em> corresponding to the provided <em>descriptor reference</em>. If the vertex does not contain that field, the value will be <code>null</code>.</li><li>If provided as an <em>array</em>, the result will be the <em>vertex document</em> comprised only of those fields matching the provided <em>references list</em>.</li><li>If <code>null</code> is provided, the vertex document will remain untouched.</li></ul></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.</li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields. If <code>true</code>, the above-mentioned fields, instead of being an object with as key the language code and as value the description, they will contain the description corresponding to the session language. If the field does not have an entry corresponding to the session language, it will remain untouched.</li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array, instead of containing only the vertex, they will contain an <em>object</em> with two elements:<ul><li><strong>vertex</strong>: will contain the <em>vertex</em>, optionally formatted by the <strong>vField</strong> parameter options.</li><li><strong>edge</strong>: will contain the <em>edge</em>, optionally formatted by the <strong>eField</strong> parameter options.</li></ul></li></ul><p>The service will return an <em>array</em> of nodes corresponding to the vertices from which the traversal started, these nodes will contain a property, <code>_children</code>, that will contain the list of child nodes. The node format is determined by the above parameters.</p><br /><p>The service will raise an exception if the provided <em>origin</em> parameter <em>cannot be resolved</em>.</p>"
    }
  },
  {
    "_key" : "s:schema:typeGetPath",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>leaf vertex</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>branch</strong>: the <em>root node</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>; a level of <code>0</code> means no level limit.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>.<br />The value may be provided as a <em>string</em>, as an <em>array</em>, or it can be <code>null</code>.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields.<br />If <code>true</code>, the above-mentioned fields will contain the value matching the session language code; if the field does not have an entry corresponding to the session language, it will remain untouched.<br /><em>Defaults to <code>false</code>.</em></li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array will contain the <em>vertex</em> and the <em>edge</em>.<br /><em>Defaults to <code>false</code>.</em></li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return an <em>array</em> of elements whose structure depends on the provided parameters:</p><ul><li><strong>doEdge</strong>:<ul><li>if this parameter is <code>false</code>:<ul><li>The element will contain the <em>path vertices</em> formatted according to the <strong>vField</strong> parameter:<ul><li>If <code>null</code> or omitted the <em>vertex</em> will be the <em>original document</em>.</li><li>If a <em>string</em>, the element will contain the <em>value</em> of the <em>vertex document field</em> whose <em>name matches the string</em>; if no field matches, the value will be <code>null</code>.</li><li>If an <em>array</em>, the element will contain the <em>vertex document</em> comprised of only those <em>fields</em> that <em>march the provided array elements</em>.</li></ul></li></ul></li><li>if the parameter is <code>true</code>:<ul><li>The element will contain an <em>object</em> with the following properties:<ul><li><strong>term</strong>: will contain the <em>vertex</em> formatted according to the <strong>vField</strong> parameter <em>(see above)</em>.</li><li><strong>edge</strong>: will contain the <em>edge</em> formatted according to the <strong>eField</strong> parameter <em>(refer to vField)</em>; if there is no edge, this will occur for the tree root, this property will not be included.</li></ul></li></ul></li></ul></li></ul>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service will return the <em>type path</em> starting from the provided <em>leaf</em> node and ending with the provided <em>branch</em> graph node, it will return an array of elements corresponding to the <em>vertices</em> of the path, or an array of objects containing both the <em>vertex</em> and the corresponding <em>edge</em> for the path elements, depending on the provided parameters.</p><br /><p>Types are <em>controlled vocabularies</em> shaped as <em>tree structures</em>, where the <em>branch</em> represents both the tree <em>leaf node</em> and a specific <em>tree structure</em> embedded in the graph. This service will perform an inbound traversal of the graph contained in the <em>schemas</em> collection starting from the provided <em>origin</em> leaf node and traversing the hierarchy of the provided <em>branch</em> tree up to the <em>root node</em>, returning the visited elements in an array. The result will be the path that starts from the leaf node and ends with the root node.</p><br /><p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>leaf vertex</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>branch</strong>: the <em>root node</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>. The value may be provided as a scalar, as an array, or it can be null:<ul><li>If provided as a <em>scalar</em>, the result will be the vertex <em>field value</em> corresponding to the provided <em>descriptor reference</em>. If the vertex does not contain that field, the value will be <code>null</code>.</li><li>If provided as an <em>array</em>, the result will be the <em>vertex document</em> comprised only of those fields matching the provided <em>references list</em>.</li><li>If <code>null</code> is provided, the vertex document will remain untouched.</li></ul></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.</li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields. If <code>true</code>, the above-mentioned fields, instead of being an object with as key the language code and as value the description, they will contain the description corresponding to the session language. If the field does not have an entry corresponding to the session language, it will remain untouched.</li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array, instead of containing only the vertex, they will contain an <em>object</em> with two elements:<ul><li><strong>vertex</strong>: will contain the <em>vertex</em>, optionally formatted by the <strong>vField</strong> parameter options.</li><li><strong>edge</strong>: will contain the <em>edge</em>, optionally formatted by the <strong>eField</strong> parameter options.</li></ul></li></ul><p>The service will return an <em>array</em> of elements whose format depends on the above <strong>doEdge</strong>, <strong>vField</strong> and <strong>eField</strong> parameters.</p><br /><p>The service will raise an exception if the provided <em>origin</em> parameter <em>cannot be resolved</em>.</p>"
    }
  },
  {
    "_key" : "s:schema:formGetList",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>vertex</em> of the tree whose siblings are to be returned, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>branch</strong>: the <em>root node</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>; a level of <code>0</code> means no level limit.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>.<br />The value may be provided as a <em>string</em>, as an <em>array</em>, or it can be <code>null</code>.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>doChoice</strong>: this is a <em>boolean</em> flag that indicates whether to filter <em>enumeration choice elements</em>: if <code>true</code>, only enumeration choice elements will be included in the result.<br />Please refer to the <code>/enum/isChoice</code> service for a description.<br /><em>Defaults to <code>false</code>.</em></li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields.<br />If <code>true</code>, the above-mentioned fields will contain the value matching the session language code; if the field does not have an entry corresponding to the session language, it will remain untouched.<br /><em>Defaults to <code>false</code>.</em></li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array will contain the <em>vertex</em> and the <em>edge</em>.<br /><em>Defaults to <code>false</code>.</em></li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return the flattened <em>array</em> of siblings of the provided root node in the provided branch of the graph; the nodes structure depends on the following parameters:</p><ul><li><strong>doEdge</strong>:<ul><li>if this parameter is <code>false</code>:<ul><li>The element will contain the <em>path vertices</em> formatted according to the <strong>vField</strong> parameter:<ul><li>If <code>null</code> or omitted the <em>vertex</em> will be the <em>original document</em>.</li><li>If a <em>string</em>, the element will contain the <em>value</em> of the <em>vertex document field</em> whose <em>name matches the string</em>; if no field matches, the value will be <code>null</code>.</li><li>If an <em>array</em>, the element will contain the <em>vertex document</em> comprised of only those <em>fields</em> that <em>march the provided array elements</em>.</li></ul></li></ul></li><li>if the parameter is <code>true</code>:<ul><li>The element will contain an <em>object</em> with the following properties:<ul><li><strong>vertex</strong>: will contain the <em>vertex</em> formatted according to the <strong>vField</strong> parameter <em>(see above)</em>.</li><li><strong>edge</strong>: will contain the <em>edge</em> formatted according to the <strong>eField</strong> parameter <em>(refer to vField)</em>; if there is no edge, this will occur for the tree root, this property will not be included.</li></ul></li></ul></li></ul></li></ul>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service will return the <em>form siblings</em> of the provided <em>origin</em> node of the <em>schemas</em> graph belonging to the provided <em>branch</em>. It will return an an array containing the list of nodes from which the traversal started with a property, <code>_children</code>, that is an array containing the children nodes of the current node. The nodes will contain either the vertex, ot the vertex and the corresponding edge, depending on the service parameter.</p><p>Forms are <em>controlled vocabularies</em> representing <em>fields</em> in an input or output form, shaped as <em>tree structures</em>, where the <em>branch</em> represents both the tree <em>root node</em> and a specific <em>tree structure</em> embedded in the graph. This service will perform an inbound traversal of the graph contained in the <em>schemas</em> collection starting from the provided <em>origin</em> node and visiting all the sibling elements belonging to the provided <em>branch</em> tree, returning the elements in a <em>flattened</em> array. The result will be the selection of all the siblings of the <em>origin</em> node belonging to the <em>branch</em> tree.</p><p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the traversal origin <em>vertex</em> node, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>branch</strong>: the <em>root node</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>. The value may be provided as a scalar, as an array, or it can be null:<ul><li>If provided as a <em>scalar</em>, the result will be the vertex <em>field value</em> corresponding to the provided <em>descriptor reference</em>. If the vertex does not contain that field, the value will be <code>null</code>.</li><li>If provided as an <em>array</em>, the result will be the <em>vertex document</em> comprised only of those fields matching the provided <em>references list</em>.</li><li>If <code>null</code> is provided, the vertex document will remain untouched.</li></ul></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.</li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields. If <code>true</code>, the above-mentioned fields, instead of being an object with as key the language code and as value the description, they will contain the description corresponding to the session language. If the field does not have an entry corresponding to the session language, it will remain untouched.</li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array, instead of containing only the vertex, they will contain an <em>object</em> with two elements:<ul><li><strong>vertex</strong>: will contain the <em>vertex</em>, optionally formatted by the <strong>vField</strong> parameter options.</li><li><strong>edge</strong>: will contain the <em>edge</em>, optionally formatted by the <strong>eField</strong> parameter options.</li></ul></li></ul><p>The service will return an <em>array</em> of nodes corresponding to the vertices from which the traversal started, these nodes will contain a property, <code>_children</code>, that will contain the list of child nodes. The node format is determined by the above parameters.</p><p>The service will raise an exception if the provided <em>origin</em> parameter <em>cannot be resolved</em>.</p>"
    }
  },
  {
    "_key" : "s:schema:formGetTree",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>vertex</em> of the tree whose siblings are to be returned, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>branch</strong>: the <em>root node</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>; a level of <code>0</code> means no level limit.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>.<br />The value may be provided as a <em>string</em>, as an <em>array</em>, or it can be <code>null</code>.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields.<br />If <code>true</code>, the above-mentioned fields will contain the value matching the session language code; if the field does not have an entry corresponding to the session language, it will remain untouched.<br /><em>Defaults to <code>false</code>.</em></li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array will contain the <em>vertex</em> and the <em>edge</em>.<br /><em>Defaults to <code>false</code>.</em></li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return the hierarchy of the provided root <em>siblings</em>, the top nodes will have a property, <code>_children</code>, which is an array that will contain the list of the node's children. If the minimum depth level is <code>0</code>, the result will be an array with a single node: the root. If the level is greater than <code>0</code>, the result will be an array of nodes from which the traversal started. The format of the nodes depends on the following parameters:</p><ul><li><strong>doEdge</strong>:<ul><li>if this parameter is <code>false</code>:<ul><li>The element will contain the <em>path vertices</em> formatted according to the <strong>vField</strong> parameter:<ul><li>If <code>null</code> or omitted the <em>vertex</em> will be the <em>original document</em>.</li><li>If a <em>string</em>, the element will contain the <em>value</em> of the <em>vertex document field</em> whose <em>name matches the string</em>; if no field matches, the value will be <code>null</code>.</li><li>If an <em>array</em>, the element will contain the <em>vertex document</em> comprised of only those <em>fields</em> that <em>march the provided array elements</em>.</li></ul></li></ul></li><li>if the parameter is <code>true</code>:<ul><li>The element will contain an <em>object</em> with the following properties:<ul><li><strong>vertex</strong>: will contain the <em>vertex</em> formatted according to the <strong>vField</strong> parameter <em>(see above)</em>.</li><li><strong>edge</strong>: will contain the <em>edge</em> formatted according to the <strong>eField</strong> parameter <em>(refer to vField)</em>; if there is no edge, this will occur for the tree root, this property will not be included.</li></ul></li></ul></li></ul></li></ul>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service will return the <em>enumeration siblings</em> of the provided <em>origin</em> node of the <em>schemas</em> graph belonging to the provided <em>branch</em>. It will return an an array containing the list of nodes from which the traversal started with a property, <code>_children</code>, that is an array containing the children nodes of the current node. The nodes will contain either the vertex, ot the vertex and the corresponding edge, depending on the service parameter.</p><br /><p>Enumerations are <em>controlled vocabularies</em> shaped as <em>tree structures</em>, where the <em>branch</em> represents both the tree <em>root node</em> and a specific <em>tree structure</em> embedded in the graph. This service will perform an inbound traversal of the graph contained in the <em>schemas</em> collection starting from the provided <em>origin</em> node and visiting all the sibling elements belonging to the provided <em>branch</em> tree, returning an array of the nodes from which the traversal started.</p><br /><p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the traversal origin <em>vertex</em> node, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>branch</strong>: the <em>root node</em> of the tree, provided as a term <code>_key</code> or <code>_id</code>.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>. The value may be provided as a scalar, as an array, or it can be null:<ul><li>If provided as a <em>scalar</em>, the result will be the vertex <em>field value</em> corresponding to the provided <em>descriptor reference</em>. If the vertex does not contain that field, the value will be <code>null</code>.</li><li>If provided as an <em>array</em>, the result will be the <em>vertex document</em> comprised only of those fields matching the provided <em>references list</em>.</li><li>If <code>null</code> is provided, the vertex document will remain untouched.</li></ul></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.</li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields. If <code>true</code>, the above-mentioned fields, instead of being an object with as key the language code and as value the description, they will contain the description corresponding to the session language. If the field does not have an entry corresponding to the session language, it will remain untouched.</li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array, instead of containing only the vertex, they will contain an <em>object</em> with two elements:<ul><li><strong>vertex</strong>: will contain the <em>vertex</em>, optionally formatted by the <strong>vField</strong> parameter options.</li><li><strong>edge</strong>: will contain the <em>edge</em>, optionally formatted by the <strong>eField</strong> parameter options.</li></ul></li></ul><p>The service will return an <em>array</em> of nodes corresponding to the vertices from which the traversal started, these nodes will contain a property, <code>_children</code>, that will contain the list of child nodes. The node format is determined by the above parameters.</p><br /><p>The service will raise an exception if the provided <em>origin</em> parameter <em>cannot be resolved</em>.</p>"
    }
  },
  {
    "_key" : "s:schema:userManagerHierarchy",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>leaf vertex</em> of the tree, provided as a user <code>_key</code> or <code>_id</code>, or as a used object containing the significant fields (username).</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>; a level of <code>0</code> means no level limit.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>.<br />The value may be provided as a <em>string</em>, as an <em>array</em>, or it can be <code>null</code>.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields.<br />If <code>true</code>, the above-mentioned fields will contain the value matching the session language code; if the field does not have an entry corresponding to the session language, it will remain untouched.<br /><em>Defaults to <code>false</code>.</em></li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array will contain the <em>vertex</em> and the <em>edge</em>.<br /><em>Defaults to <code>false</code>.</em></li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return an <em>array</em> of elements whose structure depends on the provided parameters:</p><ul><li><strong>doEdge</strong>:<ul><li>if this parameter is <code>false</code>:<ul><li>The element will contain the <em>path vertices</em> formatted according to the <strong>vField</strong> parameter:<ul><li>If <code>null</code> or omitted the <em>vertex</em> will be the <em>original document</em>.</li><li>If a <em>string</em>, the element will contain the <em>value</em> of the <em>vertex document field</em> whose <em>name matches the string</em>; if no field matches, the value will be <code>null</code>.</li><li>If an <em>array</em>, the element will contain the <em>vertex document</em> comprised of only those <em>fields</em> that <em>march the provided array elements</em>.</li></ul></li></ul></li><li>if the parameter is <code>true</code>:<ul><li>The element will contain an <em>object</em> with the following properties:<ul><li><strong>term</strong>: will contain the <em>vertex</em> formatted according to the <strong>vField</strong> parameter <em>(see above)</em>.</li><li><strong>edge</strong>: will contain the <em>edge</em> formatted according to the <strong>eField</strong> parameter <em>(refer to vField)</em>; if there is no edge, this will occur for the tree root, this property will not be included.</li></ul></li></ul></li></ul></li></ul>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service will return the <em>enumeration path</em> starting from the provided <em>leaf</em> node and ending with the provided <em>branch</em> graph node, it will return an array of elements corresponding to the <em>vertices</em> of the path, or an array of objects containing both the <em>vertex</em> and the corresponding <em>edge</em> for the path elements, depending on the provided parameters.</p><br /><p>All users, except the system administrator, have another user that acts as their <em>manager</em>. When a user is created, the user that created the new user object becomes its manager, this relationship is expressed in a graph. This service will perform an outbound traversal of the graph contained in the <em>schemas</em> collection starting from the provided <em>origin</em> leaf node and traversing the hierarchy of the provided <em>branch</em> tree up to the <em>root node</em>, returning the visited elements in an array. The result will be the path that starts from the leaf node and ends with the root node.</p><br /><p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>leaf vertex</em> of the tree, provided as a user <code>_key</code> or <code>_id</code>, or an object containing the <em>username</em> property.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. The value may be provided as a scalar, as an array, or it can be null:<ul><li>If provided as a <em>scalar</em>, the result will be the vertex <em>field value</em> corresponding to the provided <em>descriptor reference</em>. If the vertex does not contain that field, the value will be <code>null</code>.</li><li>If provided as an <em>array</em>, the result will be the <em>vertex document</em> comprised only of those fields matching the provided <em>references list</em>.</li><li>If <code>null</code> is provided, the vertex document will remain untouched.</li></ul></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.</li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields. If <code>true</code>, the above-mentioned fields, instead of being an object with as key the language code and as value the description, they will contain the description corresponding to the session language. If the field does not have an entry corresponding to the session language, it will remain untouched.</li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array, instead of containing only the vertex, they will contain an <em>object</em> with two elements:<ul><li><strong>vertex</strong>: will contain the <em>vertex</em>, optionally formatted by the <strong>vField</strong> parameter options.</li><li><strong>edge</strong>: will contain the <em>edge</em>, optionally formatted by the <strong>eField</strong> parameter options.</li></ul></li></ul><p>The service will return an <em>array</em> of elements whose format depends on the above <strong>doEdge</strong>, <strong>vField</strong> and <strong>eField</strong> parameters.</p><br /><p>The service will raise an exception if the provided <em>origin</em> parameter <em>cannot be resolved</em>.</p>"
    }
  },
  {
    "_key" : "s:schema:userManagedList",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>leaf vertex</em> of the tree, provided as a user <code>_key</code> or <code>_id</code>, or as a used object containing the significant fields (username).</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>; a level of <code>0</code> means no level limit.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>.<br />The value may be provided as a <em>string</em>, as an <em>array</em>, or it can be <code>null</code>.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields.<br />If <code>true</code>, the above-mentioned fields will contain the value matching the session language code; if the field does not have an entry corresponding to the session language, it will remain untouched.<br /><em>Defaults to <code>false</code>.</em></li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array will contain the <em>vertex</em> and the <em>edge</em>.<br /><em>Defaults to <code>false</code>.</em></li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return a <em>flattened array</em> of elements, whose structure depends on the provided parameters:</p><ul><li><strong>doEdge</strong>:<ul><li>if this parameter is <code>false</code>:<ul><li>The element will contain data formatted according to the <strong>vField</strong> parameter:<ul><li>If <code>null</code> or omitted the <em>vertex</em> will be the <em>original document</em>.</li><li>If a <em>string</em>, the element will contain the <em>value</em> of the <em>vertex document field</em> whose <em>name matches the string</em>; if no field matches, the value will be <code>null</code>.</li><li>If an <em>array</em>, the element will contain the <em>vertex document</em> comprised of only those <em>fields</em> that <em>march the provided array elements</em>.</li></ul></li></ul></li><li>if the parameter is <code>true</code>:<ul><li>The element will contain an <em>object</em> with the following properties:<ul><li><strong>_vertex</strong>: will contain the <em>vertex</em> formatted according to the <strong>vField</strong> parameter <em>(see above)</em>.</li><li><strong>_edge</strong>: will contain the <em>edge</em> formatted according to the <strong>eField</strong> parameter <em>(refer to vField)</em>; if there is no edge, this will occur for the tree root, this property will not be included.</li></ul></li></ul></li></ul></li></ul>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service will return the <em>flattened array</em> of the <em>users</em> which are managed by the provided user, it will return an array of elements corresponding to the <em>vertices</em> of the graph, or an array of objects containing both the <em>vertex</em> and the corresponding <em>edge</em> for the path elements, depending on the provided parameters.</p><br /><p>All users, except the system administrator, have another user that acts as their <em>manager</em>. When a user is created, the user that created the new user object becomes its manager, this relationship is expressed in a graph. This service will perform an inbound traversal of the graph contained in the <em>schemas</em> collection starting from the provided <em>origin</em> node and traversing the graph down to the <em>leaf node</em>, returning the visited elements in an array. The result will be the tree that starts from the origin node and ends with the leaf nodes, <em>flattened in an array</em>.</p><br /><p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>origin vertex</em> of the tree, provided as a user <code>_key</code> or <code>_id</code>, or an object containing the <em>username</em> property.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. The value may be provided as a scalar, as an array, or it can be null:<ul><li>If provided as a <em>scalar</em>, the result will be the vertex <em>field value</em> corresponding to the provided <em>descriptor reference</em>. If the vertex does not contain that field, the value will be <code>null</code>.</li><li>If provided as an <em>array</em>, the result will be the <em>vertex document</em> comprised only of those fields matching the provided <em>references list</em>.</li><li>If <code>null</code> is provided, the vertex document will remain untouched.</li></ul></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.</li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields. If <code>true</code>, the above-mentioned fields, instead of being an object with as key the language code and as value the description, they will contain the description corresponding to the session language. If the field does not have an entry corresponding to the session language, it will remain untouched.</li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array, instead of containing only the vertex, they will contain an <em>object</em> with two elements:<ul><li><strong>_vertex</strong>: will contain the <em>vertex</em>, optionally formatted by the <strong>vField</strong> parameter options.</li><li><strong>_edge</strong>: will contain the <em>edge</em>, optionally formatted by the <strong>eField</strong> parameter options.</li></ul></li></ul><p>The service will return an <em>array</em> of elements whose format depends on the above <strong>doEdge</strong>, <strong>vField</strong> and <strong>eField</strong> parameters.</p><br /><p>The service will raise an exception if the provided <em>origin</em> parameter <em>cannot be resolved</em>.</p>"
    }
  },
  {
    "_key" : "s:schema:userManagedTree",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>origin vertex</em> of the tree, provided as a user <code>_key</code> or <code>_id</code>, or as a used object containing the significant fields (username).</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>; a level of <code>0</code> means no level limit.<br /><em>Defaults to <code>0</code></em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>.<br />The value may be provided as a <em>string</em>, as an <em>array</em>, or it can be <code>null</code>.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a term <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.<br /><em>Defaults to <code>null</code>.</em></li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields.<br />If <code>true</code>, the above-mentioned fields will contain the value matching the session language code; if the field does not have an entry corresponding to the session language, it will remain untouched.<br /><em>Defaults to <code>false</code>.</em></li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array will contain the <em>vertex</em> and the <em>edge</em>.<br /><em>Defaults to <code>false</code>.</em></li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return an <em>object</em> in which the <code>_children</code> property will contain the array of managed users. The structure of the elements depends on the provided parameters:</p><ul><li><strong>doEdge</strong>:<ul><li>if this parameter is <code>false</code>:<ul><li>The element will contain data formatted according to the <strong>vField</strong> parameter:<ul><li>If <code>null</code> or omitted the <em>vertex</em> will be the <em>original document</em>.</li><li>If a <em>string</em>, the element will contain the <em>value</em> of the <em>vertex document field</em> whose <em>name matches the string</em>; if no field matches, the value will be <code>null</code>.</li><li>If an <em>array</em>, the element will contain the <em>vertex document</em> comprised of only those <em>fields</em> that <em>march the provided array elements</em>.</li></ul></li></ul></li><li>if the parameter is <code>true</code>:<ul><li>The element will contain an <em>object</em> with the following properties:<ul><li><strong>_vertex</strong>: will contain the <em>vertex</em> formatted according to the <strong>vField</strong> parameter <em>(see above)</em>.</li><li><strong>_edge</strong>: will contain the <em>edge</em> formatted according to the <strong>eField</strong> parameter <em>(refer to vField)</em>; if there is no edge, this will occur for the tree root, this property will not be included.</li></ul></li></ul></li></ul></li></ul>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service will return the <em>tree of siblings</em> of the provided <em>origin</em> node in the <em>schemas</em> graph corresponding to the <em>user manager</em> relationship. It will return an array containing the <em>list of nodes</em> from which the traversal started with a property, <code>_children</code>, that is an array containing the children nodes of the current node. The elements will contain either the vertex, or the vertex and the corresponding edge, depending on the service parameter.</p><br /><p>All users, except the system administrator, have another user that acts as their <em>manager</em>. When a user is created, the user that created the new user object becomes its manager, this relationship is expressed in a graph. This service will perform an inbound traversal of the graph contained in the <em>schemas</em> collection starting from the provided <em>origin</em> node and traversing the graph down to the <em>leaf nodes</em>, returning the visited elements in an object, where the <code>_children</code> property will contain the current object's managed users.</p><br /><p>The service expects the following parameters from the body:</p><ul><li><strong>origin</strong>: the <em>origin vertex</em> of the tree, provided as a user <code>_key</code> or <code>_id</code>, or an object containing the <em>username</em> property.</li><li><strong>minDepth</strong>: an <em>integer</em> indicating the <em>minimum depth</em> of the traversal, it determines at what level the traversal will <em>start</em>.</li><li><strong>maxDepth</strong>: an <em>integer</em> indicating the <em>maximum depth</em> of the traversal, it determines at what level the traversal will <em>stop</em>.</li><li><strong>vField</strong>: the vertex field name(s) to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. The value may be provided as a scalar, as an array, or it can be null:<ul><li>If provided as a <em>scalar</em>, the result will be the vertex <em>field value</em> corresponding to the provided <em>descriptor reference</em>. If the vertex does not contain that field, the value will be <code>null</code>.</li><li>If provided as an <em>array</em>, the result will be the <em>vertex document</em> comprised only of those fields matching the provided <em>references list</em>.</li><li>If <code>null</code> is provided, the vertex document will remain untouched.</li></ul></li><li><strong>eField</strong>: the <em>edge field name(s)</em> to be returned in the result, provided as a descriptor <code>_key</code> or <code>_id</code>. This parameter behaves exactly as the previous <strong>vField</strong> parameter, except that it applies to returned <em>edges</em>; this parameter is only relevant if the <strong>doEdge</strong> parameter is set.</li><li><strong>doLanguage</strong>: this is a <em>boolean</em> flag that indicates whether to restrict description fields to the <em>current session language</em>, it applies to the <code>label</code>, <code>definition</code>, <code>description</code>, <code>note</code> and <code>example</code> fields. If <code>true</code>, the above-mentioned fields, instead of being an object with as key the language code and as value the description, they will contain the description corresponding to the session language. If the field does not have an entry corresponding to the session language, it will remain untouched.</li><li><strong>doEdge</strong>: this is a <em>boolean</em> flag that indicates whether to <em>include the edge in the result</em>. If <code>true</code>, the elements of the result array, instead of containing only the vertex, they will contain an <em>object</em> with two elements:<ul><li><strong>_vertex</strong>: will contain the <em>vertex</em>, optionally formatted by the <strong>vField</strong> parameter options.</li><li><strong>_edge</strong>: will contain the <em>edge</em>, optionally formatted by the <strong>eField</strong> parameter options.</li></ul></li></ul><p>The service will return an <em>object</em> of elements whose format depends on the above <strong>doEdge</strong>, <strong>vField</strong> and <strong>eField</strong> parameters.</p><br /><p>The service will raise an exception if the provided <em>origin</em> parameter <em>cannot be resolved</em>.</p>"
    }
  },
  {
    "_key" : "s:schema:validateProperty",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters from the body:</p><ul><li><strong>descriptor</strong>: the <code>_key</code> of the descriptor that defines the property.</li><li><strong>value</strong>: the property value.</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>If the service was successful, it will return the same object as it was provided with the property value cast to the correct data type. If the service was unsuccessful, it will return an object, <code>{ error : record }</code>, where record will contain the error record, this structure is an extended <code>Error</code> object with the following notable properties:<ul><li><strong>name</strong>: This is the Error object <code>name</code>, it indicates the type of error.</li><li><strong>param_mess</strong>: This is the error code number, it can be found in the <code>messages</code> collection by prepending the '<code>e</code>' to the code.</li><li><strong>param_lang</strong>: This is the language code of the error name and message.</li><li><strong>param_data</strong>: This is the eventual data that is included in the error message, it will generally be the incorrect value.</li><li><strong>param_http</strong>: This is the HTTP status code associated with the error.</li><li><strong>description</strong>: This is the error message.</li></ul></p><p>Note that although errors are structured as exceptions, the service will not return them as an exception, the HTTP status code will be <code>200</code>, since the goal of the service is to assert whether values are valid. The service will raise exceptions, thus return an error HTTP status code, if it encounters an unexpected error.</p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service can be used to validate a property value, it expects an object in the POST body containing two properties:<ul><li><strong>descriptor</strong>: The <code>_key</code> of the descriptor corresponding to the property name.</li><li><strong>value</strong>: The value of the property.</ul></p><p>If the value is valid, the service will return the same object as was provided, with the value cast to the correct type. If the value is invalid, the service will return an object, <code>{ error : record }</code>, where record will contain the error record.</p>"
    }
  },
  {
    "_key" : "s:schema:validateStructure",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters from the body:</p><ul><li><strong>data</strong>: the object structure to validate.</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>If the service was successful, it will return the same object as it was provided with the structure property values cast to their correct data type. If the service was unsuccessful, it will return an object, <code>{ error : record }</code>, where record will contain the error record, this structure is an extended <code>Error</code> object with the following notable properties:<ul><li><strong>name</strong>: This is the Error object <code>name</code>, it indicates the type of error.</li><li><strong>param_mess</strong>: This is the error code number, it can be found in the <code>messages</code> collection by prepending the '<code>e</code>' to the code.</li><li><strong>param_lang</strong>: This is the language code of the error name and message.</li><li><strong>param_data</strong>: This is the eventual data that is included in the error message, it will generally be the incorrect value.</li><li><strong>param_http</strong>: This is the HTTP status code associated with the error.</li><li><strong>description</strong>: This is the error message.</li></ul></p><p>Note that although errors are structured as exceptions, the service will not return them as an exception, the HTTP status code will be <code>200</code>, since the goal of the service is to assert whether values are valid. The service will raise exceptions, thus return an error HTTP status code, if it encounters an unexpected error.</p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service can be used to validate an object structure, it expects an object in the POST body containing one property:<ul><li><strong>data</strong>: The object structure to validate.</li></ul></p><p>If the structure is valid, the service will return the same object as was provided, with the structure property values cast to their correct data types. If the structure contains invalid data, the service will return an object, <code>{ error : record }</code>, where record will contain the error record.</p>"
    }
  },
  {
    "_key" : "s:schema:validateForm",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters from the body:</p><ul><li><strong>form</strong>: the form term <code>_key</code>.</li><li><strong>data</strong>: the object structure to validate.</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>If the service was successful, it will return an object structured as follows:<ul><li><strong>_branch</strong>: This will contain the <code>_id</code> of the form term corresponding to the form branch.</li><li><strong>_fields</strong>: This will contain the flattened list of fields included in the form.</li><li><strong>_form</strong>: This will contain the form structure.</li></ul></p><p>Note that if you include fields in the provided object data structure that do not belong to the form, these will be resolved and appended to the end of the form, this means that the form will contain all its fields plus the eventual additional fields provided in the data structure; the <code>interface</code> value for these additional fields will be set by default to <code>:state:interface:field:in:out</code>, which means input-output.</p><p>If you provide an empty structure, you can use this service to retrieve the form structure.</p><p>If the service was unsuccessful, it will return an object, <code>{ error : record }</code>, where record will contain the error record, this structure is an extended <code>Error</code> object with the following notable properties:<ul><li><strong>name</strong>: This is the Error object <code>name</code>, it indicates the type of error.</li><li><strong>param_mess</strong>: This is the error code number, it can be found in the <code>messages</code> collection by prepending the '<code>e</code>' to the code.</li><li><strong>param_lang</strong>: This is the language code of the error name and message.</li><li><strong>param_data</strong>: This is the eventual data that is included in the error message, it will generally be the incorrect value.</li><li><strong>param_http</strong>: This is the HTTP status code associated with the error.</li><li><strong>description</strong>: This is the error message.</li></ul></p><p>Note that although errors are structured as exceptions, the service will not return them as an exception, the HTTP status code will be <code>200</code>, since the goal of the service is to assert whether values are valid. The service will raise exceptions, thus return an error HTTP status code, if it encounters an unexpected error.</p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service can be used to validate an object structure associated to a form, it expects an object in the POST body containing tro property:<ul><li><strong>form</strong>: The form term <code>_key</code>.</li><li><strong>data</strong>: The object structure to validate.</li></ul></p><p>If the structure is valid, the service will return an object, <code>{ result ; form }</code>, where form will be the form structure where the elements matching the properties of the provided data structure will have an additional property, <code>_value</code>, that will contain the data structure value cast to its correct data type. If the structure contains invalid data, the service will return an object, <code>{ error : record }</code>, where record will contain the error record.</p>"
    }
  },
  {
    "_key" : "s:schema:getTerm",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameter in the POST body:</p><ul><li><strong>reference</strong>: the term document reference, the value can be provided in two formats:</li><ul><li><em>string</em>: the term reference as the term document <code>_id</code> or <code>_key</code>.</li><li><em>object</em>: the term reference as the term document significant fields: the service will select the term that matches the provided properties.</li></ul></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return an object, <code>{ document : value }</code>, where value will be the found term object.</p><p><em>Note that if you provide a structure to match, the service will raise an error if more than one term was selected: this service expects the reference to match one document only.</em></p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service can be used to retrieve a specific term, it expects an object in the POST body containing one property:<ul><li><strong>reference</strong>: the term document reference, the value can be provided in two formats:</li><ul><li><em>string</em>: the term reference as the term document <code>_id</code> or <code>_key</code>.</li><li><em>object</em>: the term reference as the term document significant fields: the service will select the term that matches the provided properties.</li></ul></ul></p><p>The service will return an object, <code>{ document : value }</code>, where value will be the found term object.</p><p><em>Note that if you provide a structure to match, the service will raise an error if more than one term was selected: this service expects the reference to match one single document only.</em></p>"
    }
  },
  {
    "_key" : "s:schema:getDescriptor",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameter in the POST body:</p><ul><li><strong>reference</strong>: the descriptor document reference, the value can be provided in two formats:</li><ul><li><em>string</em>: the descriptor reference as the descriptor document <code>_id</code> or <code>_key</code>.</li><li><em>object</em>: the descriptor reference as the descriptor document significant fields: the service will select the descriptor that matches the provided properties.</li></ul></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return an object, <code>{ document : value }</code>, where value will be the found descriptor object.</p><p><em>Note that if you provide a structure to match, the service will raise an error if more than one descriptor was selected: this service expects the reference to match one document only.</em></p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service can be used to retrieve a specific descriptor, it expects an object in the POST body containing one property:<ul><li><strong>reference</strong>: the descriptor document reference, the value can be provided in two formats:</li><ul><li><em>string</em>: the descriptor reference as the descriptor document <code>_id</code> or <code>_key</code>.</li><li><em>object</em>: the descriptor reference as the descriptor document significant fields: the service will select the descriptor that matches the provided properties.</li></ul></ul></p><p>The service will return an object, <code>{ document : value }</code>, where value will be the found descriptor object.</p><p><em>Note that if you provide a structure to match, the service will raise an error if more than one descriptor was selected: this service expects the reference to match one single document only.</em></p>"
    }
  },
  {
    "_key" : "s:schema:getStudy",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameter in the POST body:</p><ul><li><strong>reference</strong>: the study document reference, the value can be provided in two formats:</li><ul><li><em>string</em>: the study reference as the study document <code>_id</code> or <code>_key</code>.</li><li><em>object</em>: the study reference as the study document significant fields: the service will select the study that matches the provided properties.</li></ul></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return an object, <code>{ document : value }</code>, where value will be the found study object.</p><p><em>Note that if you provide a structure to match, the service will raise an error if more than one study was selected: this service expects the reference to match one document only.</em></p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service can be used to retrieve a specific study, it expects an object in the POST body containing one property:<ul><li><strong>reference</strong>: the study document reference, the value can be provided in two formats:</li><ul><li><em>string</em>: the study reference as the study document <code>_id</code> or <code>_key</code>.</li><li><em>object</em>: the study reference as the study document significant fields: the service will select the study that matches the provided properties.</li></ul></ul></p><p>The service will return an object, <code>{ document : value }</code>, where value will be the found study object.</p><p><em>Note that if you provide a structure to match, the service will raise an error if more than one study was selected: this service expects the reference to match one single document only.</em></p>"
    }
  },
  {
    "_key" : "s:session:ping",
    "response" : {
      "ISO:639:3:eng" : "The object <code>{ result : 'pong' }</code>."
    },
    "description" : {
      "ISO:639:3:eng" : "<p>This service will return the object <code>{ result : 'pong' }</code>,it can be used to check whether the service is responding.</p><p>This service may fail if there is a JavaScript error, for instance,if a module in requiring a missing file, such as Dict.js. It will also fail if your database server is turned off...</p>"
    }
  },
  {
    "_key" : "s:session:user",
    "response" : {
      "ISO:639:3:eng" : "The service returns an object <code>{ result : value }</code>, where <code>value</code> will be the current user record in the session, or <code>null</code>, if there is no current user."
    },
    "description" : {
      "ISO:639:3:eng" : "The service returns the current session user record in an object<code>{ result : value }</code>, where <code>value</code> will either be theuser's record, or <code>null</code>, if there is no current user."
    }
  },
  {
    "_key" : "s:session:login",
    "body" : {
      "ISO:639:3:eng" : "Provide the user credentials:<ul><li><strong>username</strong>: the user code (<em>string</em>).<li><strong>password</strong>: the user password (<em>string</em>).</ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return an object, <code>{ result : value }</code>, in which <code>value</code> will be the user record.</p><p>If the user cannot be logged in, the service will return an error:<ul><li><code>404</code>: this error means that the user could not be found.<li><code>403</code>: this error means that the authentication failed.<li><code>500</code>: all other errors are expected to be unforeseen.</ul></p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service can be used to login a user, it expects two parameters: <code>username</code>, which represents the user identification code and <code>password</code>, which represents the user credentials password.</p><p>If the service succeeds to locate the user and validate its credentials, it will return an object, <code>{ result : value }</code>, where <code>value</code> will contain the user record; in all other cases the service will return an error.</p>"
    }
  },
  {
    "_key": "s:session:logout",
    "response": {
      "ISO:639:3:eng": "If there was a previous session user, the service will return an object, <code>{ result : value }</code>, in which <code>value</code> will be the previous user record, or <code>null</code>, if there was no current session user."
    },
    "description": {
      "ISO:639:3:eng": "The service can be used to logout the current session user, will return an object, <code>{ result : value }</code>, where <code>value</code> will contain the previous session user record, or <code>null</code>, if no user was previously logged in."
    }
  },
  {
    "_key" : "s:session:userProfileForm",
    "response" : {
      "ISO:639:3:eng" : "The service returns an object <code>{ result : value }</code>, where <code>value</code> will be the sign-in form with the current user record in the session."
    },
    "description" : {
      "ISO:639:3:eng" : "The service returns the sign-in form filled with the current user record."
    }
  },
  {
    "_key" : "s:session:userProfile",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>token</code></strong>: the user <em>token</em> string.</li><li><strong><code>data</code></strong>: the user <em>sign in form contents</em> object which must include the following required properties:</li><ul><li><strong><code>username</code></stromg>: the user code.</li><li><strong><code>password</code></stromg>: the user password.</li><li><strong><code>name</code></stromg>: the user full name.</li><li><strong><code>email</code></stromg>: the user e-mail address.</li><li><strong><code>language</code></stromg>: the user preferred language code.</li></ul></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the user object."
    },
    "description" : {
      "ISO:639:3:eng" : "The service is used to change the current session user profile. The service expects the following information in the request POST body:<ul><li><strong><code>token</code></strong>: the user authentication <em>token</em> string.</li><li><strong><code>data</code></strong>: the sign in <em>form contents</em> object which should include the following properties:</li><ul><li><strong><code>username</code></stromg>: the user code.</li><li><strong><code>password</code></stromg>: the user password.</li><li><strong><code>name</code></stromg>: the user full name.</li><li><strong><code>email</code></stromg>: the user e-mail address.</li><li><strong><code>language</code></stromg>: the user preferred language code.</li></ul></ul><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the updated user object.</p>"
    }
  },
  {
    "_key" : "s:session:managers",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters in the POST body:</p><ul><li><strong><code>doEdge</code></strong>: If <code>false</code>, each element of the result array will be a <em>user</em>; if <code>true</code>, each element will be an <em>object</em> where <code>_vertex</code> will contain the user and <code>_edge</code> will contain the edge. If omitted, this parameter will be set to <code>false</code></li><li><strong><code>minDepth</code></strong>: The <em>minimum depth of the traversal</em>, it must be provided as an <em>integer</em> where <code>0</code> represents the origin level and greater values will start the traversal at the according level; if you provide <code>null</code>, the parameter will be ignored (equivalent to providing <code>0</code>). If omitted, this parameter defaults to <code>0</code>.</li><li><strong><code>maxDepth</code></strong>: The <em>maximum depth of the traversal</em>, it must be provided as an <em>integer</em> where <code>0</code> will traverse the graph till the root and greater values will stop the traversal at the according level; if you provide <code>null</code>, the parameter will be ignored (equivalent to providing <code>0</code>). If omitted, this parameter defaults to <code>0</code>.</li></ul><p>All parameters are optional, if omitted, they will be set to their default values.</p>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service returns an object <code>{ result : value }</code>, where <em>value</em> will be the current session user <em>manager hierarchy</em>, or <code>null</code>, if there is no current user. </p><p>The returned value is an array, that provides the managers hierarchy starting from the current user up until the root manager, the scope and contents of each element depends on the following parameters:: </p><ul><li><code>doEdge</code>: If <code>false</code>, each array element will contain the user record; if <code>true</code>, each element will be an object where <code>_vertex</code> will contain the user record and <code>_edge</code> will contain the edge.</li><li><code>minDepth</code> and <code>maxDepth</code>: They determine respectively the minimum and maximum depth of the traversal.</li></ul><p>By default user records will lack the <code>_id</code>, <code>_key</code> and <code>_rev</code> properties, the managers, that is any user at a higher level than the current user, will also lack the <code>role</code>; all edges, if requested, will lack the <code>_rev</code>, <code>_from</code> and <code>_to</code> properties.</p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service will return the <em>manager hierarchy</em> of the <em>current session user</em>, the result will be an object <code>{ result : value }</code>, where <em>value</em> will be the current session user hierarchy, or <code>null</code>, if there is no current user.</p><p>The hierarchy is expressed as an <em>array</em> of user records <em>starting from the current user</em> and ending with the <em>root manager</em>. The format of the result elements and the graph scope are determined by the following parameters:</p><ul><li><strong><code>doEdge</code></strong>: If <code>false</code>, each element of the array will be a <em>user</em>; if <code>true</code>, each element will be an <em>object</em> where <code>_vertex</code> will contain the user and <code>_edge</code> will contain the edge. If omitted, this parameter will be set to <code>false</code></li><li><strong><code>minDepth</code></strong>: The <em>minimum depth of the traversal</em>, it must be provided as an <em>integer</em> where <code>0</code> represents the the current user and greater values will start the traversal at the according level in the user's hierarchy; if you provide <code>null</code>, the parameter will be ignored, which is equivalent to providing <code>0</code>. If omitted, this parameter defaults to <code>0</code>.</li><li><strong><code>maxDepth</code></strong>: The <em>maximum depth of the traversal</em>, it must be provided as an <em>integer</em> where <code>0</code> will traverse the full graph. Values higher than <code>0</code> represent the hierarchy level above the current user, the traversal will stop when that level is reached. If you provide <code>null</code>, the parameter will be ignored, which is equivalent toproviding <code>0</code>. If omitted, this parameter defaults to <code>0</code>.</li></ul><p>By default all records will lack the <code>_id</code>, <code>_key</code> and <code>_rev</code> properties, eventual edges will also lack the <code>_from</code> and <code>_to</code> properties. User records representing managers, that is, users in the hierarchy level higher than the current user, will also lack the <code>role</code> property.</p>"
    }
  },
  {
    "_key" : "s:session:manages",
    "body" : {
      "ISO:639:3:eng" : "<p>The service expects the following parameters in the POST body:</p><ul><li><strong><code>doTree</code></strong>: If <code>false</code>, the service will return the flattened array of the current user managed siblings; if <code>true</code>, the service will return the hierarchical tree of the current user managed siblings, where the <code>_children</code> property will contain the array of managed users. If omitted, this parameter will be set to <code>true</code></li><li><strong><code>doEdge</code></strong>: If <code>false</code>, each element of the result will be a <em>user</em> record; if <code>true</code>, each element will be an <em>object</em> where <code>_vertex</code> will contain the user and <code>_edge</code> will contain the edge. If omitted, this parameter will be set to <code>false</code></li><li><strong><code>minDepth</code></strong>: The <em>minimum depth of the traversal</em>, it must be provided as an <em>integer</em> where <code>0</code> represents the origin level and greater values will start the traversal at the according level; if you provide <code>null</code>, the parameter will be ignored (equivalent to providing <code>0</code>). If omitted, this parameter defaults to <code>0</code>.</li><li><strong><code>maxDepth</code></strong>: The <em>maximum depth of the traversal</em>, it must be provided as an <em>integer</em> where <code>0</code> will traverse the graph till the root and greater values will stop the traversal at the according level; if you provide <code>null</code>, the parameter will be ignored (equivalent to providing <code>0</code>). If omitted, this parameter defaults to <code>0</code>.</li></ul><p>All parameters are optional, if omitted, they will be set to their default values.</p>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service returns an object <code>{ result : value }</code>, where <em>value</em> will be the current session user <em>managed siblings hierarchy</em>, or <code>null</code>, if there is no current user. </p><p>The returned value will be an array whose elements format depends on the following parameters:: </p><ul><li><code>doTree</code>: If <code>false</code>, the service will return the <em>flattened array</em> of the current users managed siblings, each array element will contain the user record; if <code>true</code>, the service will return the <em>hierarchical tree</em> of the managed users, where the <code>_children</code> property will contain the list of managed users.</li><li><code>doEdge</code>: If <code>false</code>, each array element will contain the user record; if <code>true</code>, each element will be an object where <code>_vertex</code> will contain the user record and <code>_edge</code> will contain the edge.</li><li><code>minDepth</code> and <code>maxDepth</code>: They determine respectively the minimum and maximum depth of the traversal.</li></ul><p>By default user records will lack the <code>_id</code>, <code>_key</code> and <code>_rev</code> properties, the managers, that is any user at a higher level than the current user, will also lack the <code>role</code>; all edges, if requested, will lack the <code>_rev</code>, <code>_from</code> and <code>_to</code> properties.</p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service will return the <em>managed hierarchy</em> of the <em>current session user</em>, the result will be an object <code>{ result : value }</code>, where <em>value</em> will be the current session user hierarchy of managed users, or <code>null</code>, if there is no current user.</p><p>The hierarchy is expressed as an <em>array</em> of user records <em>starting from the current user</em> and ending with the <em>managed sibling users</em>. The format of the result elements and the graph scope are determined by the following parameters:</p><ul><li><strong><code>doTree</code></strong>: If <code>false</code>, the result of the service will be the <em>flattened array<em> of all managed sibling users; if <code>true</code>, the result of the service will be the <em>hierarchical tree</em> of managed users where the directly managed users can be found in the <code>_children</code> property. If omitted, this parameter will be set to <code>true</code></li><li><strong><code>doEdge</code></strong>: If <code>false</code>, each element will be a <em>user</em> record; if <code>true</code>, each element will be an <em>object</em> where <code>_vertex</code> will contain the user and <code>_edge</code> will contain the edge. If omitted, this parameter will be set to <code>false</code></li><li><strong><code>minDepth</code></strong>: The <em>minimum depth of the traversal</em>, it must be provided as an <em>integer</em> where <code>0</code> represents the the current user and greater values will start the traversal at the lower levels in the user's managed hierarchy; if you provide <code>null</code>, the parameter will be ignored, which is equivalent to providing <code>0</code>. If omitted, this parameter defaults to <code>0</code>.</li><li><strong><code>maxDepth</code></strong>: The <em>maximum depth of the traversal</em>, it must be provided as an <em>integer</em> where <code>0</code> will traverse the full graph. Values higher than <code>0</code> represent the hierarchy level below the current user, the traversal will stop when that level is reached. If you provide <code>null</code>, the parameter will be ignored, which is equivalent toproviding <code>0</code>. If omitted, this parameter defaults to <code>0</code>.</li></ul><p>By default all records will lack the <code>_id</code>, <code>_key</code> and <code>_rev</code> properties, eventual edges will also lack the <code>_from</code> and <code>_to</code> properties. User records representing managers, that is, users in the hierarchy level higher than the current user, will also lack the <code>role</code> property.</p>"
    }
  },
  {
    "_key" : "s:admin:signup",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>token</code></strong>: The administrator user <em>validation token</em> string.</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return <code>{ result : tree }</code>, where <em>tree</em> is the <em>tree structure</em> of the administrator user <em>sign-up form</em>, <code>terms/:form:admin</code>.</p><p>Forms are nested tree structures in which the root is the form and the children are the form fields or eventual sub-forms. The <code>result</code> value is an array of such structures in which each element is an object that may have the following properties:<ul><li><code><strong>_vertex</strong></code>: In the root element, or in sub-form elements, this property will contain the <em>form term object</em>; in child elements representing the form fields, this property will contain the <em>descriptor object</em>, including interface and modifier data.<li><code><strong>_edge</strong></code>: This property will contain the edge object relating the field, or sub-form, to its parent. In general, it will only contain the predicate, since most of the other information will have been set in the <em>_vertex</em> property.<li><code><strong>_value</strong></code>: If the current element is a field and if the provided data has an entry corresponding to this field, the property will contain that data value; in this service there is no provided data.<li><code><strong>_children</strong></code>: If the current element is the root form, or a sub-form, this property will be an array containing the fields and sub-forms that belong to the current element as a nested object having the same structure.</ul></p><p>All language string fields that have an entry corresponding to the current user's default language, will only have the corresponding value. The client will use the:<ul><li><em>_vertex</em> object fields to instantiate the correct form control,<li><em>_edge</em> object to determine the vertex type: <em>field</em>, or <em>sub-form</em>,<li><em>_value</em> to initialise the eventual current value,<li><em>_children</em> array to traverse the current element's child items.</ul></p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service is used to retrieve the <em>sign-up</em> administrator user form to the client. The service expects one parameters in the POST body:<ul><li><strong><code>token</code></strong>: The administrator <em>user authentication token</em> string.</li></ul></p><p>The service will return the sing-up form following these steps:<ul><li>Assert there are no registered users.</li><li>Assert the provided administrator authentication token is valid.</li><li>Load the sign-up form.<li>Return the form to the client.</li></ul></p><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the <em>sign-up form</em>.</p>"
    }
  },
  {
    "_key" : "s:admin:signin",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>token</code></strong>: the administrator <em>token</em> string.</li><li><strong><code>data</code></strong>: the administrator <em>form contents</em> object which should include the following properties:</li><ul><li><strong><code>name</code></strong>: the user full name.</li><li><strong><code>password</code></strong>: the user password.</li><li><strong><code>email</code></strong>: the user e-mail address.</li><li><strong><code>language</code></strong>: the user preferred language code.</li></ul></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the newly created administrator user object."
    },
    "description" : {
      "ISO:639:3:eng" : "The service can be used to create the system administrator user, it expects the following information in the request POST body:<ul><li><strong><code>token</code></strong>: the administrator <em>token</em> string.</li><li><strong><code>data</code></strong>: the administrator <em>form contents</em> object which should include the following properties:</li><ul><li><strong><code>name</code></strong>: the user full name.</li><li><strong><code>password</code></strong>: the user password.</li><li><strong><code>email</code></strong>: the user e-mail address.</li><li><strong><code>language</code></strong>: the user preferred language code.</li></ul></ul><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the nwly created user object.</p><p>The service expects the <em>users</em> collection to be empty, if that is not the case, it will raise an exception.</p>"
    }
  },
  {
    "_key" : "s:user:signupForm",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>token</code></strong>: the user token <em>validation</em> string.</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return <code>{ result : tree }</code>, where <em>tree</em> is the <em>tree structure</em> of the sign-up form, <code>terms/:form:signup</code>.</p><p>Forms are nested tree structures in which the root is the form and the children are the form fields or eventual sub-forms. The <code>result</code> value is an array of such structures in which each element is an object that may have the following properties:<ul><li><code><strong>_vertex</strong></code>: In the root element, or in sub-form elements, this property will contain the <em>form term object</em>; in child elements representing the form fields, this property will contain the <em>descriptor object</em>, including interface and modifier data.<li><code><strong>_edge</strong></code>: This property will contain the edge object relating the field, or sub-form, to its parent. In general, it will only contain the predicate, since most of the other information will have been set in the <em>_vertex</em> property.<li><code><strong>_value</strong></code>: If the current element is a field and if the provided data has an entry corresponding to this field, the property will contain that data value; in this service there is no provided data.<li><code><strong>_children</strong></code>: If the current element is the root form, or a sub-form, this property will be an array containing the fields and sub-forms that belong to the current element as a nested object having the same structure.</ul></p><p>All language string fields that have an entry corresponding to the current user's default language, will only have the corresponding value. The client will use the:<ul><li><em>_vertex</em> object fields to instantiate the correct form control,<li><em>_edge</em> object to determine the vertex type: <em>field</em>, or <em>sub-form</em>,<li><em>_value</em> to initialise the eventual current value,<li><em>_children</em> array to traverse the current element's child items.</ul></p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service is used to return the <em>sign-up</em> form to the client. The service expects one parameters in the POST body:<ul><li><strong><code>token</code></strong>: The <em>user authentication token</em> string.</li></ul></p><p>The service will return the sing-up form following these steps:<ul><li>Assert there is a current session user.</li><li>Assert the current session user can manage users.</li><li>Assert the provided user authentication token is valid.</li><li>Load the sign-up form.<li>Return the form to the client.</li></ul></p><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the <em>sign-up form</em>.</p>"
    }
  },
  {
    "_key" : "s:user:signup",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>token</code></strong>: the user authentication <em>token</em> string.</li><li><strong><code>data</code></strong>: the signup <em>form contents</em> object which should include the following properties:</li><ul><li><code>username</code>: the user <em>code</em>, if omitted, it will be set to the user <code>email</code>.</li><li><code>name</code>: the user <em>full name</em>.</li><li><code>email</code>: the user <em>e-mail address</em>.</li><li><code>language</code>: the user <em>preferred language</em> code, if omitted, it will be set to the application default language.</li><li><code>rank</code>: the user <em>rank</em>.</li><li><code>role</code>: the user <em>roles</em>.</li><li><code>group</code>: the user <em>group</em>, may be omitted.</li></ul></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be a string token corresponding to the encoded user registration record."
    },
    "description" : {
      "ISO:639:3:eng" : "The service can be used to signup a user, it expects the following information in the request POST body:<ul><li><strong><code>token</code></strong>: the user authentication <em>token</em> string.</li><li><strong><code>data</code></strong>: the signup <em>form contents</em> object which should include the following properties:</li><ul><li><strong><code>username</code></strong>: the user <em>code</em>, if omitted, it will be set to the user <code>email</code>.</li><li><strong><code>name</code></strong>: the user <em>full name</em>.</li><li><strong><code>email</code></strong>: the user <em>e-mail address</em>.</li><li><strong><code>language</code></strong>: the user <em>preferred language</em> code, if omitted, it will be set to the application default language.</li><li><strong><code>rank</code></strong>: the user <em>rank</em>.</li><li><strong><code>role</code></strong>: the user <em>roles</em>.</li><li><strong><code>group</code></strong>: the user <em>group</em>, may be omitted.</li></ul></ul><p>The service will perform the following steps:<ul> <li>Ensure there is a current user in the session.</li> <li>Ensure the current user can manage other users.</li> <li>Validate the provided authentication token.</li> <li>Validate the provided signup form data.</li> <li>Set the user status to pending.</li> <li>Set a temporary password.</li> <li>Encode the user record into a string token.</li> <li>Add authorisation data to the user record.</li> <li>Insert the user record into the collection.</li> <li>Link the current session user as the manage of the newly created user.</li> <li>Return the token.</li></ul></p><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be a string token corresponding to the encoded user record, which will be used later when the user signs in.</p>"
    }
  },
  {
    "_key" : "s:user:signinForm",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>token</code></strong>: the user token <em>validation</em> string.</li><li><strong><code>encoded</code></strong>: the encoded signup <em>token</em> string</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "<p>The service will return <code>{ result : tree }</code>, where <em>tree</em> is the <em>tree structure</em> of the sign-in form, <code>terms/:form:signin</code>, along with the user record decoded from the provided token.</p><p>Forms are nested tree structures in which the root is the form and the children are the form fields or eventual sub-forms. The <code>result</code> value is an array of such structures in which each element is an object that may have the following properties:<ul><li><code><strong>_vertex</strong></code>: In the root element, or in sub-form elements, this property will contain the <em>form term object</em>; in child elements representing the form fields, this property will contain the <em>descriptor object</em>, including interface and modifier data.<li><code><strong>_edge</strong></code>: This property will contain the edge object relating the field, or sub-form, to its parent. In general, it will only contain the predicate, since most of the other information will have been set in the <em>_vertex</em> property.<li><code><strong>_value</strong></code>: If the current element is a field and if the decoded user data has an entry corresponding to this field, the property will contain that data value.<li><code><strong>_children</strong></code>: If the current element is the root form, or a sub-form, this property will be an array containing the fields and sub-forms that belong to the current element as a nested object having the same structure.</ul></p><p>All language string fields that have an entry corresponding to the current user's default language, will only have the corresponding value. The client will use the:<ul><li><em>_vertex</em> object fields to instantiate the correct form control,<li><em>_edge</em> object to determine the vertex type: <em>field</em>, or <em>sub-form</em>,<li><em>_value</em> to initialise the eventual current value,<li><em>_children</em> array to traverse the current element's child items.</ul></p>"
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service is used to return the <em>sign-in</em> form to the client, after a user was registered with the <em>sign-up</em> form. The service expects two parameters in the POST body:<ul><li><strong><code>token</code></strong>: The <em>user authentication token</em> string.</li><li><strong><code>encoded</code></strong>: The <em>token string</em> returned by the <em>sign-up</em> procedure.</li></ul></p><p>The service will return the decoded token contents in the sing-in form following these steps:<ul><li>Decode the sign-up token.</li><li>Resolve the corresponding user.</li><li>Authenticate the user.</li><li>Load the singn-in form filled with the user data.<li>Return the form and user contents to the client.</li></ul></p><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the <em>sign-in form</em> filled with the user data corresponding to the provided <em>sign-up</em> token.</p>"
    }
  },
  {
    "_key" : "s:user:signin",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>token</code></strong>: the user <em>token</em> string.</li><li><strong><code>data</code></strong>: the user <em>sign in form contents</em> object which must include the following required properties:</li><ul><li><strong><code>username</code></stromg>: the user code.</li><li><strong><code>password</code></stromg>: the user password.</li><li><strong><code>name</code></stromg>: the user full name.</li><li><strong><code>email</code></stromg>: the user e-mail address.</li><li><strong><code>language</code></stromg>: the user preferred language code.</li></ul></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the user object."
    },
    "description" : {
      "ISO:639:3:eng" : "The service is used to activate a user created with the sign up service, the user creation process works as follows:<ul><li>The user <em>manager</em> creates the user with the <em>sign up</em> service which returns a <em>token</em> which encodes the user properties.</li><li>The client sends a message to the user containing a link that embeds the token: the user presses the link that is transmitted to the client.</li><li>The client receives the token, decodes it and presents the <em>sign in</em> form to the user.</li><li>The signin form is processed by this service which removes the <em>pending status</em> from the user record which activates it and logs in the user.</li></ul><p>The service expects the following information in the request POST body:</p><ul><li><strong><code>token</code></strong>: the user authentication <em>token</em> string.</li><li><strong><code>data</code></strong>: the sign in <em>form contents</em> object which should include the following properties:</li><ul><li><strong><code>username</code></stromg>: the user code.</li><li><strong><code>password</code></stromg>: the user password.</li><li><strong><code>name</code></stromg>: the user full name.</li><li><strong><code>email</code></stromg>: the user e-mail address.</li><li><strong><code>language</code></stromg>: the user preferred language code.</li></ul></ul><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the updated user object.</p>"
    }
  },
  {
    "_key" : "s:user:reset",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><token>key</code></strong>: the <em>user authentication token</em> string.</li><li><strong><code>username</code></strong>: the <em>user code</em> string</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be a string token corresponding to the encoded user record."
    },
    "description" : {
      "ISO:639:3:eng" : "The service can be used to reset a user, it expects the following information in the request POST body:<ul><li><strong><code>token</code></strong>: the user authentication <em>token</em> string.</li><li><strong><code>username</code></strong>: the  <em>user code</em> string of the user to reset.</li></ul><p>The service will perform the following steps:<ul><li>Validate the provided user authentication token.</li><li>Resolve the provided username.</li><li>If there is a current session user, ensure it can manage the resolved user; <em>if there is no current user it means that the user was unable to login and reset the password</em>.</li><li>Set the resolved user status to <em>pending</em>, this will require a new sign in.</li><li>Set a temporary password.</li><li>Encode the user code and password into a string token.</li><li>Update authorisation data in the user record.</li><li>Replace the user resord.</li><li>Return the token.</li></ul></p><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be a string token corresponding to the encoded user record, which will be used later when the user signs in.</p>"
    }
  },
  {
    "_key" : "s:user:remove",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><token>key</code></strong>: the <em>user authentication token</em> string.</li><li><strong><code>username</code></strong>: the <em>user code</em> string</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be <code>true</code> if the user was deleted."
    },
    "description" : {
      "ISO:639:3:eng" : "The service can be used to remove a user, it expects the following information in the request POST body:<ul><li><strong><code>token</code></strong>: the user authentication <em>token</em> string.</li><li><strong><code>username</code></strong>: the <em>user code</em> string of the user to reset.</li></ul><p>The service will perform the following steps:<ul><li>Validate the provided user authentication token.</li><li>Resolve the provided username.</li><li>Assert that the current session usercan manage the resolved user.</li><li>Transfer the resolved managed users under the resolved user's manager.</li><li>Remove the user record.</li><li>Return true.</li></ul></p><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be <code>true</code>.</p>"
    }
  },
  {
    "_key" : "s:user:setUsername",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><token>key</code></strong>: the <em>user authentication token</em> string.</li><li><strong><code>old</code></strong>: the <em>current</em> user code string</li><li><strong><code>new</code></strong>: the <em>new</em> user code string</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the updated user code."
    },
    "description" : {
      "ISO:639:3:eng" : "The service can be used to change a user code, it expects the following information in the request POST body:<ul><li><strong><code>token</code></strong>: the user authentication <em>token</em> string.</li><li><strong><code>old</code></strong>: the <em>existing</em> user code string.</li><li><strong><code>new</code></strong>: the <em>new</em> user code string.</li></ul><p>The service will perform the following steps:<ul><li>Assert there is a current user.</li><li>Validate the provided user authentication token.</li><li>Resolve the provided <em>old</em> username.</li><li>Ensure the current user can manage the resolved user.</li><li>Assert the new username does not exist.</li><li>Update the user code in the collection.</li><li>Return the new username.</li></ul></p><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the new username.</p>"
    }
  },
  {
    "_key" : "s:descriptor:updateValidation",
    "body" : {
      "ISO:639:3:eng" : "Provide one of the following in the request POST body <code>param</code> property:<ul><li><strong><em>A string</em></strong>: the descriptor <code>_id</code> or <code>_key</code>.</li><li><strong><em>An array of strings</em></strong>: a list of descriptor <em>references</em> as their <code>_id</code> or <code>_key</code>.</li><li><strong><em>An empty array</em></strong>: in this case, <em>all</em> descriptors will be updated.</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the number of updated descriptors."
    },
    "description" : {
      "ISO:639:3:eng" : "The service can be used to update the validation structure of descriptors, it expects the following information in the request POST body <code>param</code> property:</p><ul><li><strong><em>A string</em></strong>: the descriptor <code>_id</code> or <code>_key</code>.</li><li><strong><em>An array of strings</em></strong>: a list of descriptor <em>references</em> as their <code>_id</code> or <code>_key</code>.</li><li><strong><em>An empty array</em></strong>: in this case, <em>all</em> descriptors will be updated.</li></ul><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the number of updated descriptors."
    }
  },
  {
    "_key" : "s:study:studyRegistrationForm",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>data</code></strong>: the study <em>registration form contents</em> object.</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service returns an object <code>{ result : value }</code>, where <code>value</code> will be the study registration form."
    },
    "description" : {
      "ISO:639:3:eng" : "The service returns the study registration form, with the eventual provided data."
    }
  },
  {
    "_key" : "s:study:studyRegistration",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>data</code></strong>: the study <em>registration form contents</em> object.</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the study registration object."
    },
    "description" : {
      "ISO:639:3:eng" : "The service is used to register a study from the filled contents of the registration form.<p>The service expects the following information in the request POST body:</p><ul><li><strong><code>data</code></strong>: the study registration <em>form contents</em> object.</li></ul><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the study registration object.</p>"
    }
  },
  {
    "_key" : "s:study:studyUpdateForm",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>data</code></strong>: The study reference as a string or object:</li><ul><li><em>string</em>: Either the study <code>_id</code> or <code>_key</code>.</li><li><em>object</em>: The study <em>significant fields</em> which can be used to locate the document.</li></ul></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service returns an object <code>{ result : value }</code>, where <code>value</code> will be the study update form which includes the referenced study data."
    },
    "description" : {
      "ISO:639:3:eng" : "The service can be used to retrieve the study update form, it expects the study reference in the <code>data</code> POST body as a string or object. The string must be either the study <code>_id</code> or <code>_key</code>. The object should contain the study <em>significant fields</em> which will be used to locate the document. The service will return the form structure including the resolved study data."
    }
  },
  {
    "_key" : "s:study:studyUpdate",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>data</code></strong>: the study <em>update form contents</em> object.</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the study updated object."
    },
    "description" : {
      "ISO:639:3:eng" : "The service is used to update a study from the filled contents of the update form.<p>The service expects the following information in the request POST body:</p><ul><li><strong><code>data</code></strong>: the study update <em>form contents</em> object.</li></ul><p>The service will return an object, <code>{ result : value }</code>, where <em>value</em> will be the study updated object.</p>"
    }
  },
  {
    "_key" : "s:utils:tokenAdmin",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>refresh</code></strong>: <code>false</code> will retrieve the token with the current authentication record; <code>true</code> will first refresh the authentication record, then return the token.i</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service returns an object <code>{ token : value }</code>, where <code>value</code> is the administrator user authentication token."
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service can be used to retrieve the administrator user authentication token and, optionally, refresh the authentication record before returning the token.</p><p>The token is used by some services as an additional authentication when performing operations reserved to the system administrator. The token is a string that these services expect as one of their parameters.</p><p>The service expects a boolean paramater in the POST body, <code>refresh</code>, that indicates whether or not to refresh the authentication record:<ul><li><code>false</code>: The authentication record is not refreshed, the token will not change.</li><li><code>true</code>: The authentication record will be refreshed and the resulting token will be different. Note that in this case all encoded tokens returned in the past will be invalidated, this means that you have to be sure no pending tokens will be provided to the application services. <em>Tokens are encoded objects that the application uses for authentication purposes, refreshing the authentication record should only be done when there are security issues.</em></li></ul></p>The service will return an object <code>{ token : value }</code>, where <code>value</code> will be the administrator user authentication token.</p><p>This service should fail only if the setup script has not been executed yet.</p>"
    }
  },
  {
    "_key" : "s:utils:tokenUser",
    "body" : {
      "ISO:639:3:eng" : "Provide the following properties in the request POST body:<ul><li><strong><code>refresh</code></strong>: <code>false</code> will retrieve the token with the current authentication record; <code>true</code> will first refresh the authentication record, then return the token.i</li></ul>"
    },
    "response" : {
      "ISO:639:3:eng" : "The service returns an object <code>{ token : value }</code>, where <code>value</code> is the user authentication token."
    },
    "description" : {
      "ISO:639:3:eng" : "<p>The service can be used to retrieve the user authentication token and, optionally, refresh the authentication record before returning the token.</p><p>The token is used by some services as an additional authentication when performing operations reserved to registered users. The token is a string that these services expect as one of their parameters.</p><p>The service expects a boolean paramater in the POST body, <code>refresh</code>, that indicates whether or not to refresh the authentication record:<ul><li><code>false</code>: The authentication record is not refreshed, the token will not change.</li><li><code>true</code>: The authentication record will be refreshed and the resulting token will be different. Note that in this case all encoded tokens returned in the past will be invalidated, this means that you have to be sure no pending tokens will be provided to the application services. <em>Tokens are encoded objects that the application uses for authentication purposes, refreshing the authentication record should only be done when there are security issues. In particular, all tokens returned to users who are expected to sign-in will become invalid</em></li></ul></p>The service will return an object <code>{ token : value }</code>, where <code>value</code> will be the user authentication token.</p><p>This service should fail only if the setup script has not been executed yet.</p>"
    }
  }
]
